
StationReport.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e30  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002214  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061dc  080061dc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061e4  080061e4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061e8  080061e8  000161e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  080061ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  200000d0  080062bc  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080062bc  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7e9  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e72  00000000  00000000  0002b8e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002d760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  0002df70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015495  00000000  00000000  0002e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b109  00000000  00000000  00043b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082310  00000000  00000000  0004ec56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f34  00000000  00000000  000d0fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000d0 	.word	0x200000d0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003fb0 	.word	0x08003fb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000d4 	.word	0x200000d4
 80001d4:	08003fb0 	.word	0x08003fb0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <JQ8900_commandData>:
#include "usart.h"
#include "gpio.h"
#include "JQ8900.h"

void JQ8900_commandData(uint8_t command, uint8_t data[], uint8_t dataLen)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	6039      	str	r1, [r7, #0]
 80004da:	71fb      	strb	r3, [r7, #7]
 80004dc:	4613      	mov	r3, r2
 80004de:	71bb      	strb	r3, [r7, #6]
 80004e0:	466b      	mov	r3, sp
 80004e2:	461d      	mov	r5, r3
	uint8_t buffer[4 + dataLen];
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	1d1c      	adds	r4, r3, #4
 80004e8:	1e63      	subs	r3, r4, #1
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	4623      	mov	r3, r4
 80004ee:	4618      	mov	r0, r3
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	f04f 0200 	mov.w	r2, #0
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	00cb      	lsls	r3, r1, #3
 80004fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000502:	00c2      	lsls	r2, r0, #3
 8000504:	4623      	mov	r3, r4
 8000506:	4618      	mov	r0, r3
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	f04f 0200 	mov.w	r2, #0
 8000510:	f04f 0300 	mov.w	r3, #0
 8000514:	00cb      	lsls	r3, r1, #3
 8000516:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800051a:	00c2      	lsls	r2, r0, #3
 800051c:	4623      	mov	r3, r4
 800051e:	3307      	adds	r3, #7
 8000520:	08db      	lsrs	r3, r3, #3
 8000522:	00db      	lsls	r3, r3, #3
 8000524:	ebad 0d03 	sub.w	sp, sp, r3
 8000528:	466b      	mov	r3, sp
 800052a:	3300      	adds	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
	buffer[0] = 0xaa;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	22aa      	movs	r2, #170	; 0xaa
 8000532:	701a      	strb	r2, [r3, #0]
	buffer[1] = command;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	79fa      	ldrb	r2, [r7, #7]
 8000538:	705a      	strb	r2, [r3, #1]
	buffer[2] = dataLen;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	79ba      	ldrb	r2, [r7, #6]
 800053e:	709a      	strb	r2, [r3, #2]
	buffer[3 + dataLen] = buffer[0] + buffer[1] + buffer[2];
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	785b      	ldrb	r3, [r3, #1]
 8000548:	4413      	add	r3, r2
 800054a:	b2d9      	uxtb	r1, r3
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	789a      	ldrb	r2, [r3, #2]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	3303      	adds	r3, #3
 8000554:	440a      	add	r2, r1
 8000556:	b2d1      	uxtb	r1, r2
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	54d1      	strb	r1, [r2, r3]
	int i;
	for (i = 0;i < dataLen;i++)
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	e018      	b.n	8000594 <JQ8900_commandData+0xc4>
	{
		buffer[3 + i] = data[i];
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	441a      	add	r2, r3
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	3303      	adds	r3, #3
 800056c:	7811      	ldrb	r1, [r2, #0]
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	54d1      	strb	r1, [r2, r3]
		buffer[3 + dataLen] += data[i];//��У��λ
 8000572:	79bb      	ldrb	r3, [r7, #6]
 8000574:	3303      	adds	r3, #3
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	5cd1      	ldrb	r1, [r2, r3]
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	4413      	add	r3, r2
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	79bb      	ldrb	r3, [r7, #6]
 8000584:	3303      	adds	r3, #3
 8000586:	440a      	add	r2, r1
 8000588:	b2d1      	uxtb	r1, r2
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	54d1      	strb	r1, [r2, r3]
	for (i = 0;i < dataLen;i++)
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	3301      	adds	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	79bb      	ldrb	r3, [r7, #6]
 8000596:	697a      	ldr	r2, [r7, #20]
 8000598:	429a      	cmp	r2, r3
 800059a:	dbe2      	blt.n	8000562 <JQ8900_commandData+0x92>
	}
	HAL_UART_Transmit(&huart1, buffer, 4 + dataLen, 0xffff);
 800059c:	68f9      	ldr	r1, [r7, #12]
 800059e:	79bb      	ldrb	r3, [r7, #6]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3304      	adds	r3, #4
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <JQ8900_commandData+0xec>)
 80005ac:	f002 fd5d 	bl	800306a <HAL_UART_Transmit>
 80005b0:	46ad      	mov	sp, r5
	//HAL_StatusTypeDef a = HAL_UART_Transmit_IT(&huart1,buffer,4+dataLen);

}
 80005b2:	bf00      	nop
 80005b4:	3718      	adds	r7, #24
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bdb0      	pop	{r4, r5, r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000100 	.word	0x20000100

080005c0 <WriteBus>:
};

//define methods

void WriteBus(uint8_t d)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	uint8_t b0 = 0b00000001 & d;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
	uint8_t b1 = 0b00000010 & d;
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	f003 0302 	and.w	r3, r3, #2
 80005d8:	73bb      	strb	r3, [r7, #14]
	uint8_t b2 = 0b00000100 & d;
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	737b      	strb	r3, [r7, #13]
	uint8_t b3 = 0b00001000 & d;
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 0308 	and.w	r3, r3, #8
 80005e8:	733b      	strb	r3, [r7, #12]
	uint8_t b4 = 0b00010000 & d;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 0310 	and.w	r3, r3, #16
 80005f0:	72fb      	strb	r3, [r7, #11]
	uint8_t b5 = 0b00100000 & d;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0320 	and.w	r3, r3, #32
 80005f8:	72bb      	strb	r3, [r7, #10]
	uint8_t b6 = 0b01000000 & d;
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000600:	727b      	strb	r3, [r7, #9]
	uint8_t b7 = 0b10000000 & d;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000608:	723b      	strb	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2102      	movs	r1, #2
 800060e:	4842      	ldr	r0, [pc, #264]	; (8000718 <WriteBus+0x158>)
 8000610:	f002 f838 	bl	8002684 <HAL_GPIO_WritePin>

	if (b0) HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <WriteBus+0x68>
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000620:	483d      	ldr	r0, [pc, #244]	; (8000718 <WriteBus+0x158>)
 8000622:	f002 f82f 	bl	8002684 <HAL_GPIO_WritePin>
 8000626:	e005      	b.n	8000634 <WriteBus+0x74>
	else HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800062e:	483a      	ldr	r0, [pc, #232]	; (8000718 <WriteBus+0x158>)
 8000630:	f002 f828 	bl	8002684 <HAL_GPIO_WritePin>
	if (b1) HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8000634:	7bbb      	ldrb	r3, [r7, #14]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d005      	beq.n	8000646 <WriteBus+0x86>
 800063a:	2201      	movs	r2, #1
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	4837      	ldr	r0, [pc, #220]	; (800071c <WriteBus+0x15c>)
 8000640:	f002 f820 	bl	8002684 <HAL_GPIO_WritePin>
 8000644:	e004      	b.n	8000650 <WriteBus+0x90>
	else HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	4834      	ldr	r0, [pc, #208]	; (800071c <WriteBus+0x15c>)
 800064c:	f002 f81a 	bl	8002684 <HAL_GPIO_WritePin>
	if (b2) HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8000650:	7b7b      	ldrb	r3, [r7, #13]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <WriteBus+0xa4>
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065c:	482e      	ldr	r0, [pc, #184]	; (8000718 <WriteBus+0x158>)
 800065e:	f002 f811 	bl	8002684 <HAL_GPIO_WritePin>
 8000662:	e005      	b.n	8000670 <WriteBus+0xb0>
	else HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066a:	482b      	ldr	r0, [pc, #172]	; (8000718 <WriteBus+0x158>)
 800066c:	f002 f80a 	bl	8002684 <HAL_GPIO_WritePin>
	if (b3) HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8000670:	7b3b      	ldrb	r3, [r7, #12]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d005      	beq.n	8000682 <WriteBus+0xc2>
 8000676:	2201      	movs	r2, #1
 8000678:	2108      	movs	r1, #8
 800067a:	4829      	ldr	r0, [pc, #164]	; (8000720 <WriteBus+0x160>)
 800067c:	f002 f802 	bl	8002684 <HAL_GPIO_WritePin>
 8000680:	e004      	b.n	800068c <WriteBus+0xcc>
	else HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2108      	movs	r1, #8
 8000686:	4826      	ldr	r0, [pc, #152]	; (8000720 <WriteBus+0x160>)
 8000688:	f001 fffc 	bl	8002684 <HAL_GPIO_WritePin>
	if (b4) HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800068c:	7afb      	ldrb	r3, [r7, #11]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d005      	beq.n	800069e <WriteBus+0xde>
 8000692:	2201      	movs	r2, #1
 8000694:	2120      	movs	r1, #32
 8000696:	4822      	ldr	r0, [pc, #136]	; (8000720 <WriteBus+0x160>)
 8000698:	f001 fff4 	bl	8002684 <HAL_GPIO_WritePin>
 800069c:	e004      	b.n	80006a8 <WriteBus+0xe8>
	else HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2120      	movs	r1, #32
 80006a2:	481f      	ldr	r0, [pc, #124]	; (8000720 <WriteBus+0x160>)
 80006a4:	f001 ffee 	bl	8002684 <HAL_GPIO_WritePin>
	if (b5) HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 80006a8:	7abb      	ldrb	r3, [r7, #10]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d005      	beq.n	80006ba <WriteBus+0xfa>
 80006ae:	2201      	movs	r2, #1
 80006b0:	2110      	movs	r1, #16
 80006b2:	481b      	ldr	r0, [pc, #108]	; (8000720 <WriteBus+0x160>)
 80006b4:	f001 ffe6 	bl	8002684 <HAL_GPIO_WritePin>
 80006b8:	e004      	b.n	80006c4 <WriteBus+0x104>
	else HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	4818      	ldr	r0, [pc, #96]	; (8000720 <WriteBus+0x160>)
 80006c0:	f001 ffe0 	bl	8002684 <HAL_GPIO_WritePin>
	if (b6) HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80006c4:	7a7b      	ldrb	r3, [r7, #9]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d006      	beq.n	80006d8 <WriteBus+0x118>
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4813      	ldr	r0, [pc, #76]	; (8000720 <WriteBus+0x160>)
 80006d2:	f001 ffd7 	bl	8002684 <HAL_GPIO_WritePin>
 80006d6:	e005      	b.n	80006e4 <WriteBus+0x124>
	else HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	4810      	ldr	r0, [pc, #64]	; (8000720 <WriteBus+0x160>)
 80006e0:	f001 ffd0 	bl	8002684 <HAL_GPIO_WritePin>
	if (b7) HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80006e4:	7a3b      	ldrb	r3, [r7, #8]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d006      	beq.n	80006f8 <WriteBus+0x138>
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <WriteBus+0x158>)
 80006f2:	f001 ffc7 	bl	8002684 <HAL_GPIO_WritePin>
 80006f6:	e005      	b.n	8000704 <WriteBus+0x144>
	else HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fe:	4806      	ldr	r0, [pc, #24]	; (8000718 <WriteBus+0x158>)
 8000700:	f001 ffc0 	bl	8002684 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET); //LCD read Bus when WR rising.
 8000704:	2201      	movs	r2, #1
 8000706:	2102      	movs	r1, #2
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <WriteBus+0x158>)
 800070a:	f001 ffbb 	bl	8002684 <HAL_GPIO_WritePin>
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40020000 	.word	0x40020000
 800071c:	40020800 	.word	0x40020800
 8000720:	40020400 	.word	0x40020400

08000724 <WriteCommand>:

void WriteCommand(uint8_t command)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2110      	movs	r1, #16
 8000732:	4806      	ldr	r0, [pc, #24]	; (800074c <WriteCommand+0x28>)
 8000734:	f001 ffa6 	bl	8002684 <HAL_GPIO_WritePin>
	LCD.Transmit.WriteBus(command);
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <WriteCommand+0x2c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	4610      	mov	r0, r2
 8000740:	4798      	blx	r3
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40020000 	.word	0x40020000
 8000750:	20000000 	.word	0x20000000

08000754 <WriteData>:

void WriteData(uint8_t data)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2110      	movs	r1, #16
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <WriteData+0x28>)
 8000764:	f001 ff8e 	bl	8002684 <HAL_GPIO_WritePin>
	LCD.Transmit.WriteBus(data);
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <WriteData+0x2c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	79fa      	ldrb	r2, [r7, #7]
 800076e:	4610      	mov	r0, r2
 8000770:	4798      	blx	r3
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40020000 	.word	0x40020000
 8000780:	20000000 	.word	0x20000000

08000784 <Init>:
void Init()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);//rising edge
 8000788:	2201      	movs	r2, #1
 800078a:	2101      	movs	r1, #1
 800078c:	487d      	ldr	r0, [pc, #500]	; (8000984 <Init+0x200>)
 800078e:	f001 ff79 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);//rising edge
 8000792:	2201      	movs	r2, #1
 8000794:	2102      	movs	r1, #2
 8000796:	487b      	ldr	r0, [pc, #492]	; (8000984 <Init+0x200>)
 8000798:	f001 ff74 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);//1 data 0 com
 800079c:	2201      	movs	r2, #1
 800079e:	2110      	movs	r1, #16
 80007a0:	4878      	ldr	r0, [pc, #480]	; (8000984 <Init+0x200>)
 80007a2:	f001 ff6f 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);//0 active
 80007a6:	2201      	movs	r2, #1
 80007a8:	2101      	movs	r1, #1
 80007aa:	4877      	ldr	r0, [pc, #476]	; (8000988 <Init+0x204>)
 80007ac:	f001 ff6a 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);//0 active
 80007b0:	2201      	movs	r2, #1
 80007b2:	2102      	movs	r1, #2
 80007b4:	4875      	ldr	r0, [pc, #468]	; (800098c <Init+0x208>)
 80007b6:	f001 ff65 	bl	8002684 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80007ba:	2201      	movs	r2, #1
 80007bc:	2102      	movs	r1, #2
 80007be:	4873      	ldr	r0, [pc, #460]	; (800098c <Init+0x208>)
 80007c0:	f001 ff60 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80007c4:	2005      	movs	r0, #5
 80007c6:	f001 fc11 	bl	8001fec <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	486f      	ldr	r0, [pc, #444]	; (800098c <Init+0x208>)
 80007d0:	f001 ff58 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 80007d4:	200f      	movs	r0, #15
 80007d6:	f001 fc09 	bl	8001fec <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2102      	movs	r1, #2
 80007de:	486b      	ldr	r0, [pc, #428]	; (800098c <Init+0x208>)
 80007e0:	f001 ff50 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_Delay(15);                   //到此为硬重置
 80007e4:	200f      	movs	r0, #15
 80007e6:	f001 fc01 	bl	8001fec <HAL_Delay>

	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); //根据MCU 8080-I 8bit通信接口操作规范，设置引脚的对应状�?��??
 80007ea:	2201      	movs	r2, #1
 80007ec:	2101      	movs	r1, #1
 80007ee:	4866      	ldr	r0, [pc, #408]	; (8000988 <Init+0x204>)
 80007f0:	f001 ff48 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2102      	movs	r1, #2
 80007f8:	4862      	ldr	r0, [pc, #392]	; (8000984 <Init+0x200>)
 80007fa:	f001 ff43 	bl	8002684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); //片�?�有�??????????????
 80007fe:	2200      	movs	r2, #0
 8000800:	2101      	movs	r1, #1
 8000802:	4861      	ldr	r0, [pc, #388]	; (8000988 <Init+0x204>)
 8000804:	f001 ff3e 	bl	8002684 <HAL_GPIO_WritePin>


	LCD.Transmit.WriteCommand(0xCB);    //  指令Power Control A
 8000808:	4b61      	ldr	r3, [pc, #388]	; (8000990 <Init+0x20c>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	20cb      	movs	r0, #203	; 0xcb
 800080e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x39);
 8000810:	4b5f      	ldr	r3, [pc, #380]	; (8000990 <Init+0x20c>)
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	2039      	movs	r0, #57	; 0x39
 8000816:	4798      	blx	r3
	LCD.Transmit.WriteData(0x2C);
 8000818:	4b5d      	ldr	r3, [pc, #372]	; (8000990 <Init+0x20c>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	202c      	movs	r0, #44	; 0x2c
 800081e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x00);
 8000820:	4b5b      	ldr	r3, [pc, #364]	; (8000990 <Init+0x20c>)
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	2000      	movs	r0, #0
 8000826:	4798      	blx	r3
	LCD.Transmit.WriteData(0x34);   //设置 Vcore=1.6V
 8000828:	4b59      	ldr	r3, [pc, #356]	; (8000990 <Init+0x20c>)
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	2034      	movs	r0, #52	; 0x34
 800082e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x02);   //设置DDVDH=5.6V
 8000830:	4b57      	ldr	r3, [pc, #348]	; (8000990 <Init+0x20c>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	2002      	movs	r0, #2
 8000836:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xCF);   // 指令Power Control B
 8000838:	4b55      	ldr	r3, [pc, #340]	; (8000990 <Init+0x20c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	20cf      	movs	r0, #207	; 0xcf
 800083e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x00);
 8000840:	4b53      	ldr	r3, [pc, #332]	; (8000990 <Init+0x20c>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	2000      	movs	r0, #0
 8000846:	4798      	blx	r3
	LCD.Transmit.WriteData(0XC1);
 8000848:	4b51      	ldr	r3, [pc, #324]	; (8000990 <Init+0x20c>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	20c1      	movs	r0, #193	; 0xc1
 800084e:	4798      	blx	r3
	LCD.Transmit.WriteData(0X30);
 8000850:	4b4f      	ldr	r3, [pc, #316]	; (8000990 <Init+0x20c>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	2030      	movs	r0, #48	; 0x30
 8000856:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xE8);   //指令 Driver timing Congrol A
 8000858:	4b4d      	ldr	r3, [pc, #308]	; (8000990 <Init+0x20c>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	20e8      	movs	r0, #232	; 0xe8
 800085e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x85);
 8000860:	4b4b      	ldr	r3, [pc, #300]	; (8000990 <Init+0x20c>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	2085      	movs	r0, #133	; 0x85
 8000866:	4798      	blx	r3
	LCD.Transmit.WriteData(0x00);
 8000868:	4b49      	ldr	r3, [pc, #292]	; (8000990 <Init+0x20c>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	2000      	movs	r0, #0
 800086e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x78);
 8000870:	4b47      	ldr	r3, [pc, #284]	; (8000990 <Init+0x20c>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	2078      	movs	r0, #120	; 0x78
 8000876:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xEA);  //指令 Driver timing Congrol B
 8000878:	4b45      	ldr	r3, [pc, #276]	; (8000990 <Init+0x20c>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	20ea      	movs	r0, #234	; 0xea
 800087e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x00);
 8000880:	4b43      	ldr	r3, [pc, #268]	; (8000990 <Init+0x20c>)
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	2000      	movs	r0, #0
 8000886:	4798      	blx	r3
	LCD.Transmit.WriteData(0x00);
 8000888:	4b41      	ldr	r3, [pc, #260]	; (8000990 <Init+0x20c>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	2000      	movs	r0, #0
 800088e:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xED);  //指令 Power on sequence control
 8000890:	4b3f      	ldr	r3, [pc, #252]	; (8000990 <Init+0x20c>)
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	20ed      	movs	r0, #237	; 0xed
 8000896:	4798      	blx	r3
	LCD.Transmit.WriteData(0x64);
 8000898:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <Init+0x20c>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	2064      	movs	r0, #100	; 0x64
 800089e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x03);
 80008a0:	4b3b      	ldr	r3, [pc, #236]	; (8000990 <Init+0x20c>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	2003      	movs	r0, #3
 80008a6:	4798      	blx	r3
	LCD.Transmit.WriteData(0X12);
 80008a8:	4b39      	ldr	r3, [pc, #228]	; (8000990 <Init+0x20c>)
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	2012      	movs	r0, #18
 80008ae:	4798      	blx	r3
	LCD.Transmit.WriteData(0X81);
 80008b0:	4b37      	ldr	r3, [pc, #220]	; (8000990 <Init+0x20c>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	2081      	movs	r0, #129	; 0x81
 80008b6:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xF7);  //指令Pump ratio control
 80008b8:	4b35      	ldr	r3, [pc, #212]	; (8000990 <Init+0x20c>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	20f7      	movs	r0, #247	; 0xf7
 80008be:	4798      	blx	r3
	LCD.Transmit.WriteData(0x20); //DDVDH=2*VCL
 80008c0:	4b33      	ldr	r3, [pc, #204]	; (8000990 <Init+0x20c>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	2020      	movs	r0, #32
 80008c6:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xC0);    //Power control
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <Init+0x20c>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	20c0      	movs	r0, #192	; 0xc0
 80008ce:	4798      	blx	r3
	LCD.Transmit.WriteData(0x23);   //VRH[5:0]  GVDD=4.6V
 80008d0:	4b2f      	ldr	r3, [pc, #188]	; (8000990 <Init+0x20c>)
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	2023      	movs	r0, #35	; 0x23
 80008d6:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xC1);    //Power control
 80008d8:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <Init+0x20c>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	20c1      	movs	r0, #193	; 0xc1
 80008de:	4798      	blx	r3
	LCD.Transmit.WriteData(0x10);   //SAP[2:0];BT[3:0]
 80008e0:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <Init+0x20c>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	2010      	movs	r0, #16
 80008e6:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xC5);    //VCM control  1
 80008e8:	4b29      	ldr	r3, [pc, #164]	; (8000990 <Init+0x20c>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	20c5      	movs	r0, #197	; 0xc5
 80008ee:	4798      	blx	r3
	LCD.Transmit.WriteData(0x3e);   //Contrast  VCOMH=3.45V VCOML=-1.5V
 80008f0:	4b27      	ldr	r3, [pc, #156]	; (8000990 <Init+0x20c>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	203e      	movs	r0, #62	; 0x3e
 80008f6:	4798      	blx	r3
	LCD.Transmit.WriteData(0x28);
 80008f8:	4b25      	ldr	r3, [pc, #148]	; (8000990 <Init+0x20c>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	2028      	movs	r0, #40	; 0x28
 80008fe:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xC7);    //VCM control2
 8000900:	4b23      	ldr	r3, [pc, #140]	; (8000990 <Init+0x20c>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	20c7      	movs	r0, #199	; 0xc7
 8000906:	4798      	blx	r3
	LCD.Transmit.WriteData(0x86);   //--
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <Init+0x20c>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	2086      	movs	r0, #134	; 0x86
 800090e:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0x36);    // Memory Access Control
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <Init+0x20c>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2036      	movs	r0, #54	; 0x36
 8000916:	4798      	blx	r3
	LCD.Transmit.WriteData(0xc8);  //
 8000918:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <Init+0x20c>)
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	20c8      	movs	r0, #200	; 0xc8
 800091e:	4798      	blx	r3
	//LCD_writeData(0x08);  //

	LCD.Transmit.WriteCommand(0x3A);    //指令Pixel Format Set
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <Init+0x20c>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	203a      	movs	r0, #58	; 0x3a
 8000926:	4798      	blx	r3
	LCD.Transmit.WriteData(0x66);   //RGB 接口和MCU接口模式的像素数据格式为18bit/pixel
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <Init+0x20c>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	2066      	movs	r0, #102	; 0x66
 800092e:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xB1);    //Frame Rate Control (B1h)（In Normal Mode /Full colors �??????????????
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <Init+0x20c>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	20b1      	movs	r0, #177	; 0xb1
 8000936:	4798      	blx	r3
	LCD.Transmit.WriteData(0x00);
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <Init+0x20c>)
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	2000      	movs	r0, #0
 800093e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x18);  //79HZ(frame rate)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <Init+0x20c>)
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	2018      	movs	r0, #24
 8000946:	4798      	blx	r3

	LCD.Transmit.WriteCommand(0xB6);    // Display Function Control
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <Init+0x20c>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	20b6      	movs	r0, #182	; 0xb6
 800094e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x08);   // Interval Scan
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <Init+0x20c>)
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	2008      	movs	r0, #8
 8000956:	4798      	blx	r3
	LCD.Transmit.WriteData(0x82);   //底背景为白屏�?????????????? 5 frams Scan Cycle 02black
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <Init+0x20c>)
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2082      	movs	r0, #130	; 0x82
 800095e:	4798      	blx	r3
	LCD.Transmit.WriteData(0x27);   //320 line
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <Init+0x20c>)
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	2027      	movs	r0, #39	; 0x27
 8000966:	4798      	blx	r3



	LCD.Transmit.WriteCommand(0x11);    //Exit Sleep
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <Init+0x20c>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2011      	movs	r0, #17
 800096e:	4798      	blx	r3
	HAL_Delay(120);             //必须120ms的延�??????????????
 8000970:	2078      	movs	r0, #120	; 0x78
 8000972:	f001 fb3b 	bl	8001fec <HAL_Delay>

	LCD.Transmit.WriteCommand(0x29);    //Display on
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <Init+0x20c>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2029      	movs	r0, #41	; 0x29
 800097c:	4798      	blx	r3
	//LCD.Setup.IdleMode(off);
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40020000 	.word	0x40020000
 8000988:	40020400 	.word	0x40020400
 800098c:	40020800 	.word	0x40020800
 8000990:	20000000 	.word	0x20000000

08000994 <Address>:

void Address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4604      	mov	r4, r0
 800099c:	4608      	mov	r0, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	4623      	mov	r3, r4
 80009a4:	80fb      	strh	r3, [r7, #6]
 80009a6:	4603      	mov	r3, r0
 80009a8:	80bb      	strh	r3, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	807b      	strh	r3, [r7, #2]
 80009ae:	4613      	mov	r3, r2
 80009b0:	803b      	strh	r3, [r7, #0]
	LCD.Transmit.WriteCommand(0x2a);
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <Address+0xa8>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	202a      	movs	r0, #42	; 0x2a
 80009b8:	4798      	blx	r3
	LCD.Transmit.WriteData(x1 >> 8);   //设定屏幕数据操作区域的列首地�??????????????数据，先写�?16bit数据位的高位
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <Address+0xa8>)
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	88fa      	ldrh	r2, [r7, #6]
 80009c0:	0a12      	lsrs	r2, r2, #8
 80009c2:	b292      	uxth	r2, r2
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	4610      	mov	r0, r2
 80009c8:	4798      	blx	r3
	LCD.Transmit.WriteData(x1);      //写入16bit数据位的低位
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <Address+0xa8>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	88fa      	ldrh	r2, [r7, #6]
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	4610      	mov	r0, r2
 80009d4:	4798      	blx	r3
	LCD.Transmit.WriteData(x2 >> 8);   //设定屏幕数据操作区域的列尾地�??????????????数据，先写�?16bit数据位的高位
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <Address+0xa8>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	887a      	ldrh	r2, [r7, #2]
 80009dc:	0a12      	lsrs	r2, r2, #8
 80009de:	b292      	uxth	r2, r2
 80009e0:	b2d2      	uxtb	r2, r2
 80009e2:	4610      	mov	r0, r2
 80009e4:	4798      	blx	r3
	LCD.Transmit.WriteData(x2);      //写入16bit数据位的低位
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <Address+0xa8>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	887a      	ldrh	r2, [r7, #2]
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	4610      	mov	r0, r2
 80009f0:	4798      	blx	r3
	LCD.Transmit.WriteCommand(0x2b);
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <Address+0xa8>)
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	202b      	movs	r0, #43	; 0x2b
 80009f8:	4798      	blx	r3
	LCD.Transmit.WriteData(y1 >> 8);     //设定屏幕数据操作区域的行首地�??????????????数据，，先写�??????????????16bit数据位的高位
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <Address+0xa8>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	88ba      	ldrh	r2, [r7, #4]
 8000a00:	0a12      	lsrs	r2, r2, #8
 8000a02:	b292      	uxth	r2, r2
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	4610      	mov	r0, r2
 8000a08:	4798      	blx	r3
	LCD.Transmit.WriteData(y1);         //写入16bit数据位的低位
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <Address+0xa8>)
 8000a0c:	689b      	ldr	r3, [r3, #8]
 8000a0e:	88ba      	ldrh	r2, [r7, #4]
 8000a10:	b2d2      	uxtb	r2, r2
 8000a12:	4610      	mov	r0, r2
 8000a14:	4798      	blx	r3
	LCD.Transmit.WriteData(y2 >> 8);      //设定屏幕数据操作区域的行尾地�??????????????数据，，先写�??????????????16bit数据位的高位
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <Address+0xa8>)
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	883a      	ldrh	r2, [r7, #0]
 8000a1c:	0a12      	lsrs	r2, r2, #8
 8000a1e:	b292      	uxth	r2, r2
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	4610      	mov	r0, r2
 8000a24:	4798      	blx	r3
	LCD.Transmit.WriteData(y2);         //写入16bit数据位的低位
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <Address+0xa8>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	883a      	ldrh	r2, [r7, #0]
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4798      	blx	r3
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000000 	.word	0x20000000

08000a40 <IdleMode>:

void IdleMode(status s)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	if(s==on) LCD.Transmit.WriteCommand(0x39);
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <IdleMode+0x18>
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <IdleMode+0x30>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2039      	movs	r0, #57	; 0x39
 8000a56:	4798      	blx	r3
	if(s==off) LCD.Transmit.WriteCommand(0x38);
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d103      	bne.n	8000a66 <IdleMode+0x26>
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <IdleMode+0x30>)
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2038      	movs	r0, #56	; 0x38
 8000a64:	4798      	blx	r3
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000000 	.word	0x20000000

08000a74 <PixelFormat>:

void PixelFormat(status s)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	LCD.Transmit.WriteCommand(0x3A);
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <PixelFormat+0x38>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	203a      	movs	r0, #58	; 0x3a
 8000a84:	4798      	blx	r3
	if(s==bits16) LCD.Transmit.WriteData(0x55);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d103      	bne.n	8000a94 <PixelFormat+0x20>
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <PixelFormat+0x38>)
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	2055      	movs	r0, #85	; 0x55
 8000a92:	4798      	blx	r3
	if(s==bits18) LCD.Transmit.WriteData(0x66);
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d103      	bne.n	8000aa2 <PixelFormat+0x2e>
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <PixelFormat+0x38>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2066      	movs	r0, #102	; 0x66
 8000aa0:	4798      	blx	r3
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000000 	.word	0x20000000

08000ab0 <Rectangle>:

void Rectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, const uint8_t* color)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4604      	mov	r4, r0
 8000ab8:	4608      	mov	r0, r1
 8000aba:	4611      	mov	r1, r2
 8000abc:	461a      	mov	r2, r3
 8000abe:	4623      	mov	r3, r4
 8000ac0:	80fb      	strh	r3, [r7, #6]
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	807b      	strh	r3, [r7, #2]
 8000aca:	4613      	mov	r3, r2
 8000acc:	803b      	strh	r3, [r7, #0]
	LCD.Setup.Address(y1, x1, y2 - 1, x2 - 1);
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <Rectangle+0x8c>)
 8000ad0:	691c      	ldr	r4, [r3, #16]
 8000ad2:	883b      	ldrh	r3, [r7, #0]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	88f9      	ldrh	r1, [r7, #6]
 8000ae0:	88b8      	ldrh	r0, [r7, #4]
 8000ae2:	47a0      	blx	r4
	LCD.Transmit.WriteCommand(0x2c);
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <Rectangle+0x8c>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	202c      	movs	r0, #44	; 0x2c
 8000aea:	4798      	blx	r3
	int i, j;
	for (i = 0;i < (x2 - x1) * (y2 - y1);i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e013      	b.n	8000b1a <Rectangle+0x6a>
		for (j = 0;j < 3;j++) LCD.Transmit.WriteData(color[j]);
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	e00a      	b.n	8000b0e <Rectangle+0x5e>
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <Rectangle+0x8c>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	6a39      	ldr	r1, [r7, #32]
 8000b00:	440a      	add	r2, r1
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	4610      	mov	r0, r2
 8000b06:	4798      	blx	r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	ddf1      	ble.n	8000af8 <Rectangle+0x48>
	for (i = 0;i < (x2 - x1) * (y2 - y1);i++)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	887a      	ldrh	r2, [r7, #2]
 8000b1c:	88fb      	ldrh	r3, [r7, #6]
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	8839      	ldrh	r1, [r7, #0]
 8000b22:	88ba      	ldrh	r2, [r7, #4]
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbe0      	blt.n	8000af2 <Rectangle+0x42>
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd90      	pop	{r4, r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000000 	.word	0x20000000

08000b40 <CharXY08>:

uint8_t CharXY08(uint16_t x,uint16_t y, const uint8_t charColor[], const uint8_t backColor[], char index[])
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b087      	sub	sp, #28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60ba      	str	r2, [r7, #8]
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	81fb      	strh	r3, [r7, #14]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	81bb      	strh	r3, [r7, #12]
	uint8_t assetsNum08=sizeof(Char08)/sizeof(struct char08);
 8000b52:	230f      	movs	r3, #15
 8000b54:	74bb      	strb	r3, [r7, #18]
	uint8_t width=0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	75fb      	strb	r3, [r7, #23]
	uint8_t n, i, j, k;
	for (n = 0;n < assetsNum08;n++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	75bb      	strb	r3, [r7, #22]
 8000b5e:	e06b      	b.n	8000c38 <CharXY08+0xf8>
	{
		if (Char08[n].Index == index[0])
 8000b60:	7dba      	ldrb	r2, [r7, #22]
 8000b62:	493a      	ldr	r1, [pc, #232]	; (8000c4c <CharXY08+0x10c>)
 8000b64:	4613      	mov	r3, r2
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	1a9b      	subs	r3, r3, r2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d15d      	bne.n	8000c32 <CharXY08+0xf2>
		{
			LCD.Setup.Address(y, x, y + 7, x + 5);//range of x axis can larger than char's width
 8000b76:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <CharXY08+0x110>)
 8000b78:	691c      	ldr	r4, [r3, #16]
 8000b7a:	89bb      	ldrh	r3, [r7, #12]
 8000b7c:	3307      	adds	r3, #7
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	89fb      	ldrh	r3, [r7, #14]
 8000b82:	3305      	adds	r3, #5
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	89f9      	ldrh	r1, [r7, #14]
 8000b88:	89b8      	ldrh	r0, [r7, #12]
 8000b8a:	47a0      	blx	r4
			LCD.Transmit.WriteCommand(0x2c);
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <CharXY08+0x110>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	202c      	movs	r0, #44	; 0x2c
 8000b92:	4798      	blx	r3
			for (i = 0;i<3||Char08[n].Glyph[i]!='\0';i++,width++)//'\0'==0, i<3 for preventing Glyph[i<3]==0=='0'.
 8000b94:	2300      	movs	r3, #0
 8000b96:	757b      	strb	r3, [r7, #21]
 8000b98:	e03c      	b.n	8000c14 <CharXY08+0xd4>
			{
				for (j = 0;j < 8;j++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	753b      	strb	r3, [r7, #20]
 8000b9e:	e030      	b.n	8000c02 <CharXY08+0xc2>
					for (k = 0;k < 3;k++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	74fb      	strb	r3, [r7, #19]
 8000ba4:	e027      	b.n	8000bf6 <CharXY08+0xb6>
						if (Char08[n].Glyph[i] & (1 << (7 - j)))
 8000ba6:	7dba      	ldrb	r2, [r7, #22]
 8000ba8:	7d79      	ldrb	r1, [r7, #21]
 8000baa:	4828      	ldr	r0, [pc, #160]	; (8000c4c <CharXY08+0x10c>)
 8000bac:	4613      	mov	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	4403      	add	r3, r0
 8000bb4:	440b      	add	r3, r1
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	7d3b      	ldrb	r3, [r7, #20]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	fa42 f303 	asr.w	r3, r2, r3
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <CharXY08+0xa0>
							LCD.Transmit.WriteData(charColor[k]);
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <CharXY08+0x110>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	7cfa      	ldrb	r2, [r7, #19]
 8000bd4:	68b9      	ldr	r1, [r7, #8]
 8000bd6:	440a      	add	r2, r1
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4798      	blx	r3
 8000bde:	e007      	b.n	8000bf0 <CharXY08+0xb0>
						else LCD.Transmit.WriteData(backColor[k]);
 8000be0:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <CharXY08+0x110>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	7cfa      	ldrb	r2, [r7, #19]
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	440a      	add	r2, r1
 8000bea:	7812      	ldrb	r2, [r2, #0]
 8000bec:	4610      	mov	r0, r2
 8000bee:	4798      	blx	r3
					for (k = 0;k < 3;k++)
 8000bf0:	7cfb      	ldrb	r3, [r7, #19]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	74fb      	strb	r3, [r7, #19]
 8000bf6:	7cfb      	ldrb	r3, [r7, #19]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d9d4      	bls.n	8000ba6 <CharXY08+0x66>
				for (j = 0;j < 8;j++)
 8000bfc:	7d3b      	ldrb	r3, [r7, #20]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	753b      	strb	r3, [r7, #20]
 8000c02:	7d3b      	ldrb	r3, [r7, #20]
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d9cb      	bls.n	8000ba0 <CharXY08+0x60>
			for (i = 0;i<3||Char08[n].Glyph[i]!='\0';i++,width++)//'\0'==0, i<3 for preventing Glyph[i<3]==0=='0'.
 8000c08:	7d7b      	ldrb	r3, [r7, #21]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	757b      	strb	r3, [r7, #21]
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	3301      	adds	r3, #1
 8000c12:	75fb      	strb	r3, [r7, #23]
 8000c14:	7d7b      	ldrb	r3, [r7, #21]
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d9bf      	bls.n	8000b9a <CharXY08+0x5a>
 8000c1a:	7dba      	ldrb	r2, [r7, #22]
 8000c1c:	7d79      	ldrb	r1, [r7, #21]
 8000c1e:	480b      	ldr	r0, [pc, #44]	; (8000c4c <CharXY08+0x10c>)
 8000c20:	4613      	mov	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	1a9b      	subs	r3, r3, r2
 8000c26:	4403      	add	r3, r0
 8000c28:	440b      	add	r3, r1
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1b3      	bne.n	8000b9a <CharXY08+0x5a>
	for (n = 0;n < assetsNum08;n++)
 8000c32:	7dbb      	ldrb	r3, [r7, #22]
 8000c34:	3301      	adds	r3, #1
 8000c36:	75bb      	strb	r3, [r7, #22]
 8000c38:	7dba      	ldrb	r2, [r7, #22]
 8000c3a:	7cbb      	ldrb	r3, [r7, #18]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d38f      	bcc.n	8000b60 <CharXY08+0x20>
			}
		}
	}
	return width;
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd90      	pop	{r4, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000040 	.word	0x20000040
 8000c50:	20000000 	.word	0x20000000

08000c54 <CharXY16>:

void CharXY16(uint16_t x, uint16_t y, const uint8_t charColor[], const uint8_t backColor[], char index[])
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60ba      	str	r2, [r7, #8]
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	81fb      	strh	r3, [r7, #14]
 8000c62:	460b      	mov	r3, r1
 8000c64:	81bb      	strh	r3, [r7, #12]
	uint8_t assetsNum16 = sizeof(Char16) / sizeof(struct char16);
 8000c66:	2345      	movs	r3, #69	; 0x45
 8000c68:	74bb      	strb	r3, [r7, #18]
	uint8_t width=0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	75fb      	strb	r3, [r7, #23]
	//uint8_t assetsNum1608 = sizeof(Char1608) / sizeof(struct char1608);
	uint8_t n, i, j, k;
	uint8_t cn = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	747b      	strb	r3, [r7, #17]
	for (n = 0;n < assetsNum16;n++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	75bb      	strb	r3, [r7, #22]
 8000c76:	e084      	b.n	8000d82 <CharXY16+0x12e>
	{
		if ((Char16[n].Index[0] == index[0]) && (Char16[n].Index[1] == index[1]) && (Char16[n].Index[2] == index[2]))
 8000c78:	7dba      	ldrb	r2, [r7, #22]
 8000c7a:	4947      	ldr	r1, [pc, #284]	; (8000d98 <CharXY16+0x144>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	00da      	lsls	r2, r3, #3
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	188b      	adds	r3, r1, r2
 8000c88:	781a      	ldrb	r2, [r3, #0]
 8000c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d174      	bne.n	8000d7c <CharXY16+0x128>
 8000c92:	7dba      	ldrb	r2, [r7, #22]
 8000c94:	4940      	ldr	r1, [pc, #256]	; (8000d98 <CharXY16+0x144>)
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00da      	lsls	r2, r3, #3
 8000c9e:	1ad2      	subs	r2, r2, r3
 8000ca0:	188b      	adds	r3, r1, r2
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca8:	3301      	adds	r3, #1
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d165      	bne.n	8000d7c <CharXY16+0x128>
 8000cb0:	7dba      	ldrb	r2, [r7, #22]
 8000cb2:	4939      	ldr	r1, [pc, #228]	; (8000d98 <CharXY16+0x144>)
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	00da      	lsls	r2, r3, #3
 8000cbc:	1ad2      	subs	r2, r2, r3
 8000cbe:	188b      	adds	r3, r1, r2
 8000cc0:	3302      	adds	r3, #2
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d156      	bne.n	8000d7c <CharXY16+0x128>
		{
			//cn = 1; //字符为中文
			LCD.Setup.Address(y, x, y + 15, x + 15);
 8000cce:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <CharXY16+0x148>)
 8000cd0:	691c      	ldr	r4, [r3, #16]
 8000cd2:	89bb      	ldrh	r3, [r7, #12]
 8000cd4:	330f      	adds	r3, #15
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	89fb      	ldrh	r3, [r7, #14]
 8000cda:	330f      	adds	r3, #15
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	89f9      	ldrh	r1, [r7, #14]
 8000ce0:	89b8      	ldrh	r0, [r7, #12]
 8000ce2:	47a0      	blx	r4
			LCD.Transmit.WriteCommand(0x2c);
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <CharXY16+0x148>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	202c      	movs	r0, #44	; 0x2c
 8000cea:	4798      	blx	r3
			for (i = 0;i < 32;i++,width++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	757b      	strb	r3, [r7, #21]
 8000cf0:	e03e      	b.n	8000d70 <CharXY16+0x11c>
			{
				for (j = 0;j < 8;j++)
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	753b      	strb	r3, [r7, #20]
 8000cf6:	e032      	b.n	8000d5e <CharXY16+0x10a>
					for (k = 0;k < 3;k++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	74fb      	strb	r3, [r7, #19]
 8000cfc:	e029      	b.n	8000d52 <CharXY16+0xfe>
						if (Char16[n].Glyph[i] & (1 << (7 - j)))
 8000cfe:	7dba      	ldrb	r2, [r7, #22]
 8000d00:	7d79      	ldrb	r1, [r7, #21]
 8000d02:	4825      	ldr	r0, [pc, #148]	; (8000d98 <CharXY16+0x144>)
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	00da      	lsls	r2, r3, #3
 8000d0c:	1ad2      	subs	r2, r2, r3
 8000d0e:	1883      	adds	r3, r0, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	3303      	adds	r3, #3
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	7d3b      	ldrb	r3, [r7, #20]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	fa42 f303 	asr.w	r3, r2, r3
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d008      	beq.n	8000d3c <CharXY16+0xe8>
							LCD.Transmit.WriteData(charColor[k]);
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <CharXY16+0x148>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	7cfa      	ldrb	r2, [r7, #19]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	440a      	add	r2, r1
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	4610      	mov	r0, r2
 8000d38:	4798      	blx	r3
 8000d3a:	e007      	b.n	8000d4c <CharXY16+0xf8>
						else LCD.Transmit.WriteData(backColor[k]);
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <CharXY16+0x148>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	7cfa      	ldrb	r2, [r7, #19]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	440a      	add	r2, r1
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4798      	blx	r3
					for (k = 0;k < 3;k++)
 8000d4c:	7cfb      	ldrb	r3, [r7, #19]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	74fb      	strb	r3, [r7, #19]
 8000d52:	7cfb      	ldrb	r3, [r7, #19]
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d9d2      	bls.n	8000cfe <CharXY16+0xaa>
				for (j = 0;j < 8;j++)
 8000d58:	7d3b      	ldrb	r3, [r7, #20]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	753b      	strb	r3, [r7, #20]
 8000d5e:	7d3b      	ldrb	r3, [r7, #20]
 8000d60:	2b07      	cmp	r3, #7
 8000d62:	d9c9      	bls.n	8000cf8 <CharXY16+0xa4>
			for (i = 0;i < 32;i++,width++)
 8000d64:	7d7b      	ldrb	r3, [r7, #21]
 8000d66:	3301      	adds	r3, #1
 8000d68:	757b      	strb	r3, [r7, #21]
 8000d6a:	7dfb      	ldrb	r3, [r7, #23]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	75fb      	strb	r3, [r7, #23]
 8000d70:	7d7b      	ldrb	r3, [r7, #21]
 8000d72:	2b1f      	cmp	r3, #31
 8000d74:	d9bd      	bls.n	8000cf2 <CharXY16+0x9e>
			}
			width=width/2;
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
 8000d78:	085b      	lsrs	r3, r3, #1
 8000d7a:	75fb      	strb	r3, [r7, #23]
	for (n = 0;n < assetsNum16;n++)
 8000d7c:	7dbb      	ldrb	r3, [r7, #22]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	75bb      	strb	r3, [r7, #22]
 8000d82:	7dba      	ldrb	r2, [r7, #22]
 8000d84:	7cbb      	ldrb	r3, [r7, #18]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	f4ff af76 	bcc.w	8000c78 <CharXY16+0x24>
				}
			}
		}
	}
	*/
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	371c      	adds	r7, #28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd90      	pop	{r4, r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08004180 	.word	0x08004180
 8000d9c:	20000000 	.word	0x20000000

08000da0 <CharXY32>:

void CharXY32(uint16_t x, uint16_t y, const uint8_t charColor[], const uint8_t backColor[], char index[])
{
 8000da0:	b590      	push	{r4, r7, lr}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60ba      	str	r2, [r7, #8]
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4603      	mov	r3, r0
 8000dac:	81fb      	strh	r3, [r7, #14]
 8000dae:	460b      	mov	r3, r1
 8000db0:	81bb      	strh	r3, [r7, #12]
	uint8_t assetsNum3232 = sizeof(Char3232) / sizeof(struct char3232);
 8000db2:	232b      	movs	r3, #43	; 0x2b
 8000db4:	74fb      	strb	r3, [r7, #19]
	//uint8_t assetsNum3216=sizeof(num3216);
	uint8_t n, i, j, k;
	//uint8_t cn=0;
	for (n = 0;n < assetsNum3232;n++)
 8000db6:	2300      	movs	r3, #0
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	e07f      	b.n	8000ebc <CharXY32+0x11c>
	{
		if ((Char3232[n].Index[0] == index[0]) && (Char3232[n].Index[1] == index[1]) && (Char3232[n].Index[2] == index[2]))
 8000dbc:	7dfa      	ldrb	r2, [r7, #23]
 8000dbe:	4944      	ldr	r1, [pc, #272]	; (8000ed0 <CharXY32+0x130>)
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	019b      	lsls	r3, r3, #6
 8000dc4:	4413      	add	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d16f      	bne.n	8000eb6 <CharXY32+0x116>
 8000dd6:	7dfa      	ldrb	r2, [r7, #23]
 8000dd8:	493d      	ldr	r1, [pc, #244]	; (8000ed0 <CharXY32+0x130>)
 8000dda:	4613      	mov	r3, r2
 8000ddc:	019b      	lsls	r3, r3, #6
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	3301      	adds	r3, #1
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dec:	3301      	adds	r3, #1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d160      	bne.n	8000eb6 <CharXY32+0x116>
 8000df4:	7dfa      	ldrb	r2, [r7, #23]
 8000df6:	4936      	ldr	r1, [pc, #216]	; (8000ed0 <CharXY32+0x130>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	019b      	lsls	r3, r3, #6
 8000dfc:	4413      	add	r3, r2
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	4413      	add	r3, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	3302      	adds	r3, #2
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d151      	bne.n	8000eb6 <CharXY32+0x116>
		{
			//cn=1; //字符为中文
			LCD.Setup.Address(y, x, y + 31, x + 31);
 8000e12:	4b30      	ldr	r3, [pc, #192]	; (8000ed4 <CharXY32+0x134>)
 8000e14:	691c      	ldr	r4, [r3, #16]
 8000e16:	89bb      	ldrh	r3, [r7, #12]
 8000e18:	331f      	adds	r3, #31
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	331f      	adds	r3, #31
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	89f9      	ldrh	r1, [r7, #14]
 8000e24:	89b8      	ldrh	r0, [r7, #12]
 8000e26:	47a0      	blx	r4
			LCD.Transmit.WriteCommand(0x2c);
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <CharXY32+0x134>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	202c      	movs	r0, #44	; 0x2c
 8000e2e:	4798      	blx	r3
			for (i = 0;i < 128;i++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	75bb      	strb	r3, [r7, #22]
 8000e34:	e03b      	b.n	8000eae <CharXY32+0x10e>
			{
				for (j = 0;j < 8;j++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	757b      	strb	r3, [r7, #21]
 8000e3a:	e032      	b.n	8000ea2 <CharXY32+0x102>
					for (k = 0;k < 3;k++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	753b      	strb	r3, [r7, #20]
 8000e40:	e029      	b.n	8000e96 <CharXY32+0xf6>
						if (Char3232[n].Glyph[i] & (1 << (7 - j)))
 8000e42:	7dfa      	ldrb	r2, [r7, #23]
 8000e44:	7db9      	ldrb	r1, [r7, #22]
 8000e46:	4822      	ldr	r0, [pc, #136]	; (8000ed0 <CharXY32+0x130>)
 8000e48:	4613      	mov	r3, r2
 8000e4a:	019b      	lsls	r3, r3, #6
 8000e4c:	4413      	add	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	4403      	add	r3, r0
 8000e54:	440b      	add	r3, r1
 8000e56:	3303      	adds	r3, #3
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	7d7b      	ldrb	r3, [r7, #21]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	fa42 f303 	asr.w	r3, r2, r3
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d008      	beq.n	8000e80 <CharXY32+0xe0>
							LCD.Transmit.WriteData(charColor[k]);
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <CharXY32+0x134>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	7d3a      	ldrb	r2, [r7, #20]
 8000e74:	68b9      	ldr	r1, [r7, #8]
 8000e76:	440a      	add	r2, r1
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	4798      	blx	r3
 8000e7e:	e007      	b.n	8000e90 <CharXY32+0xf0>
						else LCD.Transmit.WriteData(backColor[k]);
 8000e80:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <CharXY32+0x134>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	7d3a      	ldrb	r2, [r7, #20]
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	440a      	add	r2, r1
 8000e8a:	7812      	ldrb	r2, [r2, #0]
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4798      	blx	r3
					for (k = 0;k < 3;k++)
 8000e90:	7d3b      	ldrb	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	753b      	strb	r3, [r7, #20]
 8000e96:	7d3b      	ldrb	r3, [r7, #20]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d9d2      	bls.n	8000e42 <CharXY32+0xa2>
				for (j = 0;j < 8;j++)
 8000e9c:	7d7b      	ldrb	r3, [r7, #21]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	757b      	strb	r3, [r7, #21]
 8000ea2:	7d7b      	ldrb	r3, [r7, #21]
 8000ea4:	2b07      	cmp	r3, #7
 8000ea6:	d9c9      	bls.n	8000e3c <CharXY32+0x9c>
			for (i = 0;i < 128;i++)
 8000ea8:	7dbb      	ldrb	r3, [r7, #22]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	75bb      	strb	r3, [r7, #22]
 8000eae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	dabf      	bge.n	8000e36 <CharXY32+0x96>
	for (n = 0;n < assetsNum3232;n++)
 8000eb6:	7dfb      	ldrb	r3, [r7, #23]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	75fb      	strb	r3, [r7, #23]
 8000ebc:	7dfa      	ldrb	r2, [r7, #23]
 8000ebe:	7cfb      	ldrb	r3, [r7, #19]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	f4ff af7b 	bcc.w	8000dbc <CharXY32+0x1c>
							else LCD_writeData(backColor[k]);
				}
		}
	}
	*/
}
 8000ec6:	bf00      	nop
 8000ec8:	bf00      	nop
 8000eca:	371c      	adds	r7, #28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	08004af0 	.word	0x08004af0
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <StrXY08>:

void StrXY08(uint16_t x, uint16_t y, uint8_t spacing, const uint8_t charColor[], const uint8_t backColor[], char str[])
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	81fb      	strh	r3, [r7, #14]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	81bb      	strh	r3, [r7, #12]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint16_t xi = x;
 8000eec:	89fb      	ldrh	r3, [r7, #14]
 8000eee:	82bb      	strh	r3, [r7, #20]
	uint8_t width;
	char index[3];
	for (i = 0;str[i] != 0;)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	75fb      	strb	r3, [r7, #23]
 8000ef4:	e01c      	b.n	8000f30 <StrXY08+0x58>
	{
		index[0] = str[i];//数字占1字节
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	743b      	strb	r3, [r7, #16]
		width= LCD.Disp.CharXY08(xi, y, charColor, backColor, index);
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <StrXY08+0x70>)
 8000f02:	6a1c      	ldr	r4, [r3, #32]
 8000f04:	89b9      	ldrh	r1, [r7, #12]
 8000f06:	8ab8      	ldrh	r0, [r7, #20]
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	47a0      	blx	r4
 8000f14:	4603      	mov	r3, r0
 8000f16:	74fb      	strb	r3, [r7, #19]
		xi += spacing + width;
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	7cfb      	ldrb	r3, [r7, #19]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	4413      	add	r3, r2
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	8abb      	ldrh	r3, [r7, #20]
 8000f26:	4413      	add	r3, r2
 8000f28:	82bb      	strh	r3, [r7, #20]
		i++;
 8000f2a:	7dfb      	ldrb	r3, [r7, #23]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	75fb      	strb	r3, [r7, #23]
	for (i = 0;str[i] != 0;)
 8000f30:	7dfb      	ldrb	r3, [r7, #23]
 8000f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f34:	4413      	add	r3, r2
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1dc      	bne.n	8000ef6 <StrXY08+0x1e>
	}

}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	371c      	adds	r7, #28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd90      	pop	{r4, r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000000 	.word	0x20000000

08000f4c <StrXY16>:

void StrXY16(uint16_t x, uint16_t y, uint8_t spacing, const uint8_t charColor[], const uint8_t backColor[], char str[])
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	4603      	mov	r3, r0
 8000f56:	81fb      	strh	r3, [r7, #14]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	81bb      	strh	r3, [r7, #12]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint16_t xi = x;
 8000f60:	89fb      	ldrh	r3, [r7, #14]
 8000f62:	82bb      	strh	r3, [r7, #20]
	char index[3]={0,0,0};
 8000f64:	4a2d      	ldr	r2, [pc, #180]	; (800101c <StrXY16+0xd0>)
 8000f66:	f107 0310 	add.w	r3, r7, #16
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	8019      	strh	r1, [r3, #0]
 8000f70:	3302      	adds	r3, #2
 8000f72:	0c12      	lsrs	r2, r2, #16
 8000f74:	701a      	strb	r2, [r3, #0]
	for (i = 0;str[i] != 0;)
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]
 8000f7a:	e044      	b.n	8001006 <StrXY16+0xba>
	{
		if (str[i] > ':')//中文
 8000f7c:	7dfb      	ldrb	r3, [r7, #23]
 8000f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b3a      	cmp	r3, #58	; 0x3a
 8000f86:	d925      	bls.n	8000fd4 <StrXY16+0x88>
		{
			index[0] = str[i];
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
 8000f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	743b      	strb	r3, [r7, #16]
			index[1] = str[i + 1];
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	3301      	adds	r3, #1
 8000f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	747b      	strb	r3, [r7, #17]
			index[2] = str[i + 2];//中文占3字节
 8000f9e:	7dfb      	ldrb	r3, [r7, #23]
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	74bb      	strb	r3, [r7, #18]
			LCD.Disp.CharXY16(xi, y, charColor, backColor, index);
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <StrXY16+0xd4>)
 8000fac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000fae:	89b9      	ldrh	r1, [r7, #12]
 8000fb0:	8ab8      	ldrh	r0, [r7, #20]
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	47a0      	blx	r4
			xi += spacing + 16;
 8000fbe:	7afb      	ldrb	r3, [r7, #11]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	8abb      	ldrh	r3, [r7, #20]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	3310      	adds	r3, #16
 8000fca:	82bb      	strh	r3, [r7, #20]
			i += 3;
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	3303      	adds	r3, #3
 8000fd0:	75fb      	strb	r3, [r7, #23]
 8000fd2:	e018      	b.n	8001006 <StrXY16+0xba>
		}
		else//数字和符号
		{
			index[0] = str[i];//数字占1字节
 8000fd4:	7dfb      	ldrb	r3, [r7, #23]
 8000fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	743b      	strb	r3, [r7, #16]
			LCD.Disp.CharXY16(xi, y, charColor, backColor, index);
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <StrXY16+0xd4>)
 8000fe0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000fe2:	89b9      	ldrh	r1, [r7, #12]
 8000fe4:	8ab8      	ldrh	r0, [r7, #20]
 8000fe6:	f107 0310 	add.w	r3, r7, #16
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	47a0      	blx	r4
			xi += spacing + 8;
 8000ff2:	7afb      	ldrb	r3, [r7, #11]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	8abb      	ldrh	r3, [r7, #20]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	3308      	adds	r3, #8
 8000ffe:	82bb      	strh	r3, [r7, #20]
			i++;
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	3301      	adds	r3, #1
 8001004:	75fb      	strb	r3, [r7, #23]
	for (i = 0;str[i] != 0;)
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1b4      	bne.n	8000f7c <StrXY16+0x30>
		}
	}
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}
 800101c:	08003fc8 	.word	0x08003fc8
 8001020:	20000000 	.word	0x20000000

08001024 <StrXY32>:

void StrXY32(uint16_t x, uint16_t y, uint8_t spacing, const uint8_t charColor[], const uint8_t backColor[], char str[])
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af02      	add	r7, sp, #8
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4603      	mov	r3, r0
 800102e:	81fb      	strh	r3, [r7, #14]
 8001030:	460b      	mov	r3, r1
 8001032:	81bb      	strh	r3, [r7, #12]
 8001034:	4613      	mov	r3, r2
 8001036:	72fb      	strb	r3, [r7, #11]
	uint8_t i;
	uint16_t xi = x;
 8001038:	89fb      	ldrh	r3, [r7, #14]
 800103a:	82bb      	strh	r3, [r7, #20]
	char index[3];
	for (i = 0;str[i] != 0;)
 800103c:	2300      	movs	r3, #0
 800103e:	75fb      	strb	r3, [r7, #23]
 8001040:	e02a      	b.n	8001098 <StrXY32+0x74>
	{
		if (str[i] > ':')//中文
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b3a      	cmp	r3, #58	; 0x3a
 800104c:	d924      	bls.n	8001098 <StrXY32+0x74>
		{
			index[0] = str[i];
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	743b      	strb	r3, [r7, #16]
			index[1] = str[i + 1];
 8001058:	7dfb      	ldrb	r3, [r7, #23]
 800105a:	3301      	adds	r3, #1
 800105c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800105e:	4413      	add	r3, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	747b      	strb	r3, [r7, #17]
			index[2] = str[i + 2];//中文占3字节
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	3302      	adds	r3, #2
 8001068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	74bb      	strb	r3, [r7, #18]
			LCD.Disp.CharXY32(xi, y, charColor, backColor, index);
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <StrXY32+0x8c>)
 8001072:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001074:	89b9      	ldrh	r1, [r7, #12]
 8001076:	8ab8      	ldrh	r0, [r7, #20]
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	47a0      	blx	r4
			xi += spacing + 32;
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	b29a      	uxth	r2, r3
 8001088:	8abb      	ldrh	r3, [r7, #20]
 800108a:	4413      	add	r3, r2
 800108c:	b29b      	uxth	r3, r3
 800108e:	3320      	adds	r3, #32
 8001090:	82bb      	strh	r3, [r7, #20]
			i += 3;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	3303      	adds	r3, #3
 8001096:	75fb      	strb	r3, [r7, #23]
	for (i = 0;str[i] != 0;)
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1ce      	bne.n	8001042 <StrXY32+0x1e>
			else xi+=spacing+16;
			i++;
		}
		*/
	}
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000000 	.word	0x20000000

080010b4 <StrCenter16>:

void StrCenter16(uint16_t y, uint8_t spacing, const uint8_t charColor[], const uint8_t backColor[], char str[])
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	60ba      	str	r2, [r7, #8]
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4603      	mov	r3, r0
 80010c0:	81fb      	strh	r3, [r7, #14]
 80010c2:	460b      	mov	r3, r1
 80010c4:	737b      	strb	r3, [r7, #13]
	uint8_t cnNum = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]
	uint8_t numNum = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	75bb      	strb	r3, [r7, #22]
	uint8_t x, i;
	for (i = 0;str[i] != 0;)
 80010ce:	2300      	movs	r3, #0
 80010d0:	757b      	strb	r3, [r7, #21]
 80010d2:	e012      	b.n	80010fa <StrCenter16+0x46>
	{
		if (str[i] > ':') {
 80010d4:	7d7b      	ldrb	r3, [r7, #21]
 80010d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b3a      	cmp	r3, #58	; 0x3a
 80010de:	d906      	bls.n	80010ee <StrCenter16+0x3a>
			cnNum++;
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	3301      	adds	r3, #1
 80010e4:	75fb      	strb	r3, [r7, #23]
			i += 3;
 80010e6:	7d7b      	ldrb	r3, [r7, #21]
 80010e8:	3303      	adds	r3, #3
 80010ea:	757b      	strb	r3, [r7, #21]
 80010ec:	e005      	b.n	80010fa <StrCenter16+0x46>
		}
		else {
			numNum++;
 80010ee:	7dbb      	ldrb	r3, [r7, #22]
 80010f0:	3301      	adds	r3, #1
 80010f2:	75bb      	strb	r3, [r7, #22]
			i++;
 80010f4:	7d7b      	ldrb	r3, [r7, #21]
 80010f6:	3301      	adds	r3, #1
 80010f8:	757b      	strb	r3, [r7, #21]
	for (i = 0;str[i] != 0;)
 80010fa:	7d7b      	ldrb	r3, [r7, #21]
 80010fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1e6      	bne.n	80010d4 <StrCenter16+0x20>
		}
	}
	x = 160 - (cnNum * 16 + numNum * 8 + spacing * (cnNum + numNum - 1)) / 2;
 8001106:	7dfb      	ldrb	r3, [r7, #23]
 8001108:	005a      	lsls	r2, r3, #1
 800110a:	7dbb      	ldrb	r3, [r7, #22]
 800110c:	4413      	add	r3, r2
 800110e:	00da      	lsls	r2, r3, #3
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	7df8      	ldrb	r0, [r7, #23]
 8001114:	7db9      	ldrb	r1, [r7, #22]
 8001116:	4401      	add	r1, r0
 8001118:	3901      	subs	r1, #1
 800111a:	fb01 f303 	mul.w	r3, r1, r3
 800111e:	4413      	add	r3, r2
 8001120:	0fda      	lsrs	r2, r3, #31
 8001122:	4413      	add	r3, r2
 8001124:	105b      	asrs	r3, r3, #1
 8001126:	425b      	negs	r3, r3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	3b60      	subs	r3, #96	; 0x60
 800112c:	753b      	strb	r3, [r7, #20]
	LCD.Disp.StrXY16(x, y, spacing, charColor, backColor, str);
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <StrCenter16+0x9c>)
 8001130:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001132:	7d3b      	ldrb	r3, [r7, #20]
 8001134:	b298      	uxth	r0, r3
 8001136:	7b7a      	ldrb	r2, [r7, #13]
 8001138:	89f9      	ldrh	r1, [r7, #14]
 800113a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	47a0      	blx	r4
}
 8001146:	bf00      	nop
 8001148:	371c      	adds	r7, #28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	bf00      	nop
 8001150:	20000000 	.word	0x20000000

08001154 <StrCenter32>:

void StrCenter32(uint16_t y, uint8_t spacing, uint8_t const charColor[], const uint8_t backColor[], char str[])
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af02      	add	r7, sp, #8
 800115a:	60ba      	str	r2, [r7, #8]
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4603      	mov	r3, r0
 8001160:	81fb      	strh	r3, [r7, #14]
 8001162:	460b      	mov	r3, r1
 8001164:	737b      	strb	r3, [r7, #13]
	uint8_t cnNum = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	75fb      	strb	r3, [r7, #23]
	uint8_t numNum = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	75bb      	strb	r3, [r7, #22]
	uint8_t x, i;
	for (i = 0;str[i] != 0;)
 800116e:	2300      	movs	r3, #0
 8001170:	757b      	strb	r3, [r7, #21]
 8001172:	e012      	b.n	800119a <StrCenter32+0x46>
	{
		if (str[i] > ':') {
 8001174:	7d7b      	ldrb	r3, [r7, #21]
 8001176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001178:	4413      	add	r3, r2
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b3a      	cmp	r3, #58	; 0x3a
 800117e:	d906      	bls.n	800118e <StrCenter32+0x3a>
			cnNum++;
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	3301      	adds	r3, #1
 8001184:	75fb      	strb	r3, [r7, #23]
			i += 3;
 8001186:	7d7b      	ldrb	r3, [r7, #21]
 8001188:	3303      	adds	r3, #3
 800118a:	757b      	strb	r3, [r7, #21]
 800118c:	e005      	b.n	800119a <StrCenter32+0x46>
		}
		else {
			numNum++;
 800118e:	7dbb      	ldrb	r3, [r7, #22]
 8001190:	3301      	adds	r3, #1
 8001192:	75bb      	strb	r3, [r7, #22]
			i++;
 8001194:	7d7b      	ldrb	r3, [r7, #21]
 8001196:	3301      	adds	r3, #1
 8001198:	757b      	strb	r3, [r7, #21]
	for (i = 0;str[i] != 0;)
 800119a:	7d7b      	ldrb	r3, [r7, #21]
 800119c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1e6      	bne.n	8001174 <StrCenter32+0x20>
		}
	}
	x = 160 - (cnNum * 32 + numNum * 16 + spacing * (cnNum + numNum - 1)) / 2;
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	005a      	lsls	r2, r3, #1
 80011aa:	7dbb      	ldrb	r3, [r7, #22]
 80011ac:	4413      	add	r3, r2
 80011ae:	011a      	lsls	r2, r3, #4
 80011b0:	7b7b      	ldrb	r3, [r7, #13]
 80011b2:	7df8      	ldrb	r0, [r7, #23]
 80011b4:	7db9      	ldrb	r1, [r7, #22]
 80011b6:	4401      	add	r1, r0
 80011b8:	3901      	subs	r1, #1
 80011ba:	fb01 f303 	mul.w	r3, r1, r3
 80011be:	4413      	add	r3, r2
 80011c0:	0fda      	lsrs	r2, r3, #31
 80011c2:	4413      	add	r3, r2
 80011c4:	105b      	asrs	r3, r3, #1
 80011c6:	425b      	negs	r3, r3
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	3b60      	subs	r3, #96	; 0x60
 80011cc:	753b      	strb	r3, [r7, #20]
	LCD.Disp.StrXY32(x, y, spacing, charColor, backColor, str);
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <StrCenter32+0x9c>)
 80011d0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80011d2:	7d3b      	ldrb	r3, [r7, #20]
 80011d4:	b298      	uxth	r0, r3
 80011d6:	7b7a      	ldrb	r2, [r7, #13]
 80011d8:	89f9      	ldrh	r1, [r7, #14]
 80011da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	47a0      	blx	r4
}
 80011e6:	bf00      	nop
 80011e8:	371c      	adds	r7, #28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd90      	pop	{r4, r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000000 	.word	0x20000000

080011f4 <WriteCommandData>:
		.Report={In,Out,Tips},
};


void WriteCommandData(uint8_t command, uint8_t data[])
{
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	466b      	mov	r3, sp
 8001202:	461d      	mov	r5, r3
	uint8_t dataLen=sizeof(data);
 8001204:	2304      	movs	r3, #4
 8001206:	74fb      	strb	r3, [r7, #19]
	uint8_t buffer[4 + dataLen];
 8001208:	7cfb      	ldrb	r3, [r7, #19]
 800120a:	1d1c      	adds	r4, r3, #4
 800120c:	1e63      	subs	r3, r4, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4623      	mov	r3, r4
 8001212:	4618      	mov	r0, r3
 8001214:	f04f 0100 	mov.w	r1, #0
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	00cb      	lsls	r3, r1, #3
 8001222:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001226:	00c2      	lsls	r2, r0, #3
 8001228:	4623      	mov	r3, r4
 800122a:	4618      	mov	r0, r3
 800122c:	f04f 0100 	mov.w	r1, #0
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	00cb      	lsls	r3, r1, #3
 800123a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800123e:	00c2      	lsls	r2, r0, #3
 8001240:	4623      	mov	r3, r4
 8001242:	3307      	adds	r3, #7
 8001244:	08db      	lsrs	r3, r3, #3
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	ebad 0d03 	sub.w	sp, sp, r3
 800124c:	466b      	mov	r3, sp
 800124e:	3300      	adds	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
	buffer[0] = 0xaa;
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	22aa      	movs	r2, #170	; 0xaa
 8001256:	701a      	strb	r2, [r3, #0]
	buffer[1] = command;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	79fa      	ldrb	r2, [r7, #7]
 800125c:	705a      	strb	r2, [r3, #1]
	buffer[2] = dataLen;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	7cfa      	ldrb	r2, [r7, #19]
 8001262:	709a      	strb	r2, [r3, #2]
	buffer[3 + dataLen] = buffer[0] + buffer[1] + buffer[2];
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	4413      	add	r3, r2
 800126e:	b2d9      	uxtb	r1, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	789a      	ldrb	r2, [r3, #2]
 8001274:	7cfb      	ldrb	r3, [r7, #19]
 8001276:	3303      	adds	r3, #3
 8001278:	440a      	add	r2, r1
 800127a:	b2d1      	uxtb	r1, r2
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	54d1      	strb	r1, [r2, r3]
	int i;
	for (i = 0;i < dataLen;i++)
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e018      	b.n	80012b8 <WriteCommandData+0xc4>
	{
		buffer[3 + i] = data[i];
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	441a      	add	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3303      	adds	r3, #3
 8001290:	7811      	ldrb	r1, [r2, #0]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	54d1      	strb	r1, [r2, r3]
		buffer[3 + dataLen] += data[i];
 8001296:	7cfb      	ldrb	r3, [r7, #19]
 8001298:	3303      	adds	r3, #3
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	5cd1      	ldrb	r1, [r2, r3]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	781a      	ldrb	r2, [r3, #0]
 80012a6:	7cfb      	ldrb	r3, [r7, #19]
 80012a8:	3303      	adds	r3, #3
 80012aa:	440a      	add	r2, r1
 80012ac:	b2d1      	uxtb	r1, r2
 80012ae:	68ba      	ldr	r2, [r7, #8]
 80012b0:	54d1      	strb	r1, [r2, r3]
	for (i = 0;i < dataLen;i++)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	7cfb      	ldrb	r3, [r7, #19]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbe2      	blt.n	8001286 <WriteCommandData+0x92>
	}
	HAL_UART_Transmit(&huart1, buffer, 4 + dataLen, 0xffff);
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	7cfb      	ldrb	r3, [r7, #19]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	3304      	adds	r3, #4
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <WriteCommandData+0xec>)
 80012d0:	f001 fecb 	bl	800306a <HAL_UART_Transmit>
 80012d4:	46ad      	mov	sp, r5
	//HAL_StatusTypeDef a = HAL_UART_Transmit_IT(&huart1,buffer,4+dataLen);

}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000100 	.word	0x20000100

080012e4 <In>:

void In(uint8_t stationNow)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	uint8_t data[4]={0x30,0x30+stationNow,0x30,0x38};
 80012ee:	2330      	movs	r3, #48	; 0x30
 80012f0:	733b      	strb	r3, [r7, #12]
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	3330      	adds	r3, #48	; 0x30
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	737b      	strb	r3, [r7, #13]
 80012fa:	2330      	movs	r3, #48	; 0x30
 80012fc:	73bb      	strb	r3, [r7, #14]
 80012fe:	2338      	movs	r3, #56	; 0x38
 8001300:	73fb      	strb	r3, [r7, #15]
	Audio.Transmit.WriteCommandData(0x1b,data);
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <In+0x34>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f107 020c 	add.w	r2, r7, #12
 800130a:	4611      	mov	r1, r2
 800130c:	201b      	movs	r0, #27
 800130e:	4798      	blx	r3
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200000ac 	.word	0x200000ac

0800131c <Out>:

void Out(uint8_t stationNext)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	uint8_t data[6]={0x30,0x39,0x30,0x30+stationNext,0x30,0x3a};
 8001326:	2330      	movs	r3, #48	; 0x30
 8001328:	723b      	strb	r3, [r7, #8]
 800132a:	2339      	movs	r3, #57	; 0x39
 800132c:	727b      	strb	r3, [r7, #9]
 800132e:	2330      	movs	r3, #48	; 0x30
 8001330:	72bb      	strb	r3, [r7, #10]
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3330      	adds	r3, #48	; 0x30
 8001336:	b2db      	uxtb	r3, r3
 8001338:	72fb      	strb	r3, [r7, #11]
 800133a:	2330      	movs	r3, #48	; 0x30
 800133c:	733b      	strb	r3, [r7, #12]
 800133e:	233a      	movs	r3, #58	; 0x3a
 8001340:	737b      	strb	r3, [r7, #13]
	Audio.Transmit.WriteCommandData(0x1b,data);
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <Out+0x3c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f107 0208 	add.w	r2, r7, #8
 800134a:	4611      	mov	r1, r2
 800134c:	201b      	movs	r0, #27
 800134e:	4798      	blx	r3
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200000ac 	.word	0x200000ac

0800135c <Tips>:

void Tips()
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	uint8_t data[2]={0x00,0x01};
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	80bb      	strh	r3, [r7, #4]
	Audio.Transmit.WriteCommandData(0x07,data);
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <Tips+0x20>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1d3a      	adds	r2, r7, #4
 800136e:	4611      	mov	r1, r2
 8001370:	2007      	movs	r0, #7
 8001372:	4798      	blx	r3
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200000ac 	.word	0x200000ac

08001380 <Stop>:

void Stop()
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	Audio.Transmit.WriteCommandData(0x04,NULL);
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <Stop+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2100      	movs	r1, #0
 800138a:	2004      	movs	r0, #4
 800138c:	4798      	blx	r3
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200000ac 	.word	0x200000ac

08001398 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <MX_GPIO_Init+0x198>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <MX_GPIO_Init+0x198>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <MX_GPIO_Init+0x198>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b58      	ldr	r3, [pc, #352]	; (8001530 <MX_GPIO_Init+0x198>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a57      	ldr	r2, [pc, #348]	; (8001530 <MX_GPIO_Init+0x198>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b55      	ldr	r3, [pc, #340]	; (8001530 <MX_GPIO_Init+0x198>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b51      	ldr	r3, [pc, #324]	; (8001530 <MX_GPIO_Init+0x198>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a50      	ldr	r2, [pc, #320]	; (8001530 <MX_GPIO_Init+0x198>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <MX_GPIO_Init+0x198>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <MX_GPIO_Init+0x198>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a49      	ldr	r2, [pc, #292]	; (8001530 <MX_GPIO_Init+0x198>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <MX_GPIO_Init+0x198>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2182      	movs	r1, #130	; 0x82
 8001422:	4844      	ldr	r0, [pc, #272]	; (8001534 <MX_GPIO_Init+0x19c>)
 8001424:	f001 f92e 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LD2_Pin
 8001428:	2200      	movs	r2, #0
 800142a:	f240 7133 	movw	r1, #1843	; 0x733
 800142e:	4842      	ldr	r0, [pc, #264]	; (8001538 <MX_GPIO_Init+0x1a0>)
 8001430:	f001 f928 	bl	8002684 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin|LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 8001434:	2200      	movs	r2, #0
 8001436:	f240 4139 	movw	r1, #1081	; 0x439
 800143a:	4840      	ldr	r0, [pc, #256]	; (800153c <MX_GPIO_Init+0x1a4>)
 800143c:	f001 f922 	bl	8002684 <HAL_GPIO_WritePin>
                          |LCD_D4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8001440:	2382      	movs	r3, #130	; 0x82
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4837      	ldr	r0, [pc, #220]	; (8001534 <MX_GPIO_Init+0x19c>)
 8001458:	f000 ff90 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JQ8900_BUSY_Pin;
 800145c:	2304      	movs	r3, #4
 800145e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001464:	2302      	movs	r3, #2
 8001466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JQ8900_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4831      	ldr	r0, [pc, #196]	; (8001534 <MX_GPIO_Init+0x19c>)
 8001470:	f000 ff84 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LD2_Pin
 8001474:	f240 7333 	movw	r3, #1843	; 0x733
 8001478:	617b      	str	r3, [r7, #20]
                          |LCD_D7_Pin|LCD_D0_Pin|LCD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	482a      	ldr	r0, [pc, #168]	; (8001538 <MX_GPIO_Init+0x1a0>)
 800148e:	f000 ff75 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B_RST_Pin;
 8001492:	2310      	movs	r3, #16
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001496:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149c:	2301      	movs	r3, #1
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B_RST_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4823      	ldr	r0, [pc, #140]	; (8001534 <MX_GPIO_Init+0x19c>)
 80014a8:	f000 ff68 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin
 80014ac:	f240 4339 	movw	r3, #1081	; 0x439
 80014b0:	617b      	str	r3, [r7, #20]
                          |LCD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	481d      	ldr	r0, [pc, #116]	; (800153c <MX_GPIO_Init+0x1a4>)
 80014c6:	f000 ff59 	bl	800237c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = B_LFT_Pin|B_DWN_Pin|B_UP_Pin|B_SET_Pin
 80014ca:	f24f 0306 	movw	r3, #61446	; 0xf006
 80014ce:	617b      	str	r3, [r7, #20]
                          |B_MID_Pin|B_RHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4816      	ldr	r0, [pc, #88]	; (800153c <MX_GPIO_Init+0x1a4>)
 80014e2:	f000 ff4b 	bl	800237c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2007      	movs	r0, #7
 80014ec:	f000 fe7d 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014f0:	2007      	movs	r0, #7
 80014f2:	f000 fe96 	bl	8002222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	2008      	movs	r0, #8
 80014fc:	f000 fe75 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001500:	2008      	movs	r0, #8
 8001502:	f000 fe8e 	bl	8002222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	200a      	movs	r0, #10
 800150c:	f000 fe6d 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001510:	200a      	movs	r0, #10
 8001512:	f000 fe86 	bl	8002222 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2028      	movs	r0, #40	; 0x28
 800151c:	f000 fe65 	bl	80021ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001520:	2028      	movs	r0, #40	; 0x28
 8001522:	f000 fe7e 	bl	8002222 <HAL_NVIC_EnableIRQ>

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400

08001540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b087      	sub	sp, #28
 8001544:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  uint8_t routeNow=0;
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
  uint8_t routeNum=sizeof(Route)/sizeof(struct route);
 800154a:	2302      	movs	r3, #2
 800154c:	72bb      	strb	r3, [r7, #10]

  uint8_t upNow=1;//bus direction: 0 down 1up
 800154e:	2301      	movs	r3, #1
 8001550:	73bb      	strb	r3, [r7, #14]
  uint8_t upNext=1;//bus direction: 0 down 1up
 8001552:	2301      	movs	r3, #1
 8001554:	737b      	strb	r3, [r7, #13]
  uint8_t stationNow=0;
 8001556:	2300      	movs	r3, #0
 8001558:	733b      	strb	r3, [r7, #12]
  uint8_t stationNext=1;
 800155a:	2301      	movs	r3, #1
 800155c:	72fb      	strb	r3, [r7, #11]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155e:	f000 fcd3 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001562:	f000 fa27 	bl	80019b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001566:	f7ff ff17 	bl	8001398 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800156a:	f000 fb95 	bl	8001c98 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800156e:	f000 fb69 	bl	8001c44 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001572:	f000 fbbb 	bl	8001cec <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD.Setup.Init();
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <main+0x118>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	4798      	blx	r3
  LCD.Disp.Rectangle(0,0,320,240,Color.Black);
 800157c:	4b36      	ldr	r3, [pc, #216]	; (8001658 <main+0x118>)
 800157e:	69dc      	ldr	r4, [r3, #28]
 8001580:	4b36      	ldr	r3, [pc, #216]	; (800165c <main+0x11c>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	23f0      	movs	r3, #240	; 0xf0
 8001586:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800158a:	2100      	movs	r1, #0
 800158c:	2000      	movs	r0, #0
 800158e:	47a0      	blx	r4
  LCD.Disp.Rectangle(137,57,184,75,Color.White);
 8001590:	4b31      	ldr	r3, [pc, #196]	; (8001658 <main+0x118>)
 8001592:	69dc      	ldr	r4, [r3, #28]
 8001594:	4b32      	ldr	r3, [pc, #200]	; (8001660 <main+0x120>)
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	234b      	movs	r3, #75	; 0x4b
 800159a:	22b8      	movs	r2, #184	; 0xb8
 800159c:	2139      	movs	r1, #57	; 0x39
 800159e:	2089      	movs	r0, #137	; 0x89
 80015a0:	47a0      	blx	r4
  LCD.Disp.StrCenter16(58, 1, Color.Black, Color.White, Route[routeNow].Title);
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <main+0x118>)
 80015a4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	492e      	ldr	r1, [pc, #184]	; (8001664 <main+0x124>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	3304      	adds	r3, #4
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <main+0x120>)
 80015bc:	4a27      	ldr	r2, [pc, #156]	; (800165c <main+0x11c>)
 80015be:	2101      	movs	r1, #1
 80015c0:	203a      	movs	r0, #58	; 0x3a
 80015c2:	47a0      	blx	r4
  JQ8900_commandData(0x13,5,1);//volumn set:5
 80015c4:	2201      	movs	r2, #1
 80015c6:	2105      	movs	r1, #5
 80015c8:	2013      	movs	r0, #19
 80015ca:	f7fe ff81 	bl	80004d0 <JQ8900_commandData>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(mode)
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <main+0x128>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d050      	beq.n	8001678 <main+0x138>
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d1f9      	bne.n	80015ce <main+0x8e>
	  {
	  	  case setting:
	  		  if(flagMode)
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <main+0x12c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <main+0xba>
	  		  {
	  			  mode=normal;
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <main+0x128>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
	  			  flagRst=1;
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <main+0x130>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
	  			  HAL_Delay(200);
 80015ee:	20c8      	movs	r0, #200	; 0xc8
 80015f0:	f000 fcfc 	bl	8001fec <HAL_Delay>
	  			  flagMode=0;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <main+0x12c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
	  		  }
  			  if(flagOut)
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <main+0x134>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 81c1 	beq.w	8001986 <main+0x446>
  			  {
  				  if(routeNow==routeNum-1) routeNow=0;
 8001604:	7bfa      	ldrb	r2, [r7, #15]
 8001606:	7abb      	ldrb	r3, [r7, #10]
 8001608:	3b01      	subs	r3, #1
 800160a:	429a      	cmp	r2, r3
 800160c:	d102      	bne.n	8001614 <main+0xd4>
 800160e:	2300      	movs	r3, #0
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e002      	b.n	800161a <main+0xda>
  				  else routeNow++;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	3301      	adds	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
  	  			  LCD.Disp.Rectangle(137,57,184,75,Color.White);
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <main+0x118>)
 800161c:	69dc      	ldr	r4, [r3, #28]
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <main+0x120>)
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	234b      	movs	r3, #75	; 0x4b
 8001624:	22b8      	movs	r2, #184	; 0xb8
 8001626:	2139      	movs	r1, #57	; 0x39
 8001628:	2089      	movs	r0, #137	; 0x89
 800162a:	47a0      	blx	r4
  	  			  LCD.Disp.StrCenter16(58, 1, Color.Black, Color.White, Route[routeNow].Title); //display bus route
 800162c:	4b0a      	ldr	r3, [pc, #40]	; (8001658 <main+0x118>)
 800162e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	490c      	ldr	r1, [pc, #48]	; (8001664 <main+0x124>)
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	3304      	adds	r3, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <main+0x120>)
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <main+0x11c>)
 8001648:	2101      	movs	r1, #1
 800164a:	203a      	movs	r0, #58	; 0x3a
 800164c:	47a0      	blx	r4
  	  			  flagOut=0;
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <main+0x134>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
  			  }
  			  break;
 8001654:	e197      	b.n	8001986 <main+0x446>
 8001656:	bf00      	nop
 8001658:	20000000 	.word	0x20000000
 800165c:	080060f4 	.word	0x080060f4
 8001660:	08006109 	.word	0x08006109
 8001664:	0800610c 	.word	0x0800610c
 8001668:	200000fc 	.word	0x200000fc
 800166c:	200000ec 	.word	0x200000ec
 8001670:	200000c0 	.word	0x200000c0
 8001674:	200000f4 	.word	0x200000f4
	  	  case normal:
	  		  if(stationNow==0) upNow=1;
 8001678:	7b3b      	ldrb	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <main+0x142>
 800167e:	2301      	movs	r3, #1
 8001680:	73bb      	strb	r3, [r7, #14]
	  		  if(stationNow==Route[routeNow].StationNum-1) upNow=0;
 8001682:	7b39      	ldrb	r1, [r7, #12]
 8001684:	7bfa      	ldrb	r2, [r7, #15]
 8001686:	487c      	ldr	r0, [pc, #496]	; (8001878 <main+0x338>)
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4403      	add	r3, r0
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	3b01      	subs	r3, #1
 8001696:	4299      	cmp	r1, r3
 8001698:	d101      	bne.n	800169e <main+0x15e>
 800169a:	2300      	movs	r3, #0
 800169c:	73bb      	strb	r3, [r7, #14]
	  		  if(stationNext==0) upNext=1;
 800169e:	7afb      	ldrb	r3, [r7, #11]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <main+0x168>
 80016a4:	2301      	movs	r3, #1
 80016a6:	737b      	strb	r3, [r7, #13]
	  		  if(stationNext==Route[routeNow].StationNum-1) upNext=0;
 80016a8:	7af9      	ldrb	r1, [r7, #11]
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	4872      	ldr	r0, [pc, #456]	; (8001878 <main+0x338>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4403      	add	r3, r0
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	4299      	cmp	r1, r3
 80016be:	d101      	bne.n	80016c4 <main+0x184>
 80016c0:	2300      	movs	r3, #0
 80016c2:	737b      	strb	r3, [r7, #13]


	  		  if(flagRst)
 80016c4:	4b6d      	ldr	r3, [pc, #436]	; (800187c <main+0x33c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 8091 	beq.w	80017f0 <main+0x2b0>
	  		  {
	  			  stationNow=0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	733b      	strb	r3, [r7, #12]
	  			  stationNext=1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	72fb      	strb	r3, [r7, #11]
	  			  Audio.Setup.Stop();
 80016d6:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <main+0x340>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4798      	blx	r3
	  			  LCD.Disp.CharXY16(5,220,Color.Green, Color.Black,"S:X");
 80016dc:	4b69      	ldr	r3, [pc, #420]	; (8001884 <main+0x344>)
 80016de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80016e0:	4b69      	ldr	r3, [pc, #420]	; (8001888 <main+0x348>)
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4b69      	ldr	r3, [pc, #420]	; (800188c <main+0x34c>)
 80016e6:	4a6a      	ldr	r2, [pc, #424]	; (8001890 <main+0x350>)
 80016e8:	21dc      	movs	r1, #220	; 0xdc
 80016ea:	2005      	movs	r0, #5
 80016ec:	47a0      	blx	r4
	  			  LCD.Disp.StrXY08(25,220,1,Color.Cyan, Color.Black,"V:3");
 80016ee:	4b65      	ldr	r3, [pc, #404]	; (8001884 <main+0x344>)
 80016f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80016f2:	4b68      	ldr	r3, [pc, #416]	; (8001894 <main+0x354>)
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	4b65      	ldr	r3, [pc, #404]	; (800188c <main+0x34c>)
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <main+0x358>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	21dc      	movs	r1, #220	; 0xdc
 8001700:	2019      	movs	r0, #25
 8001702:	47a0      	blx	r4
	  			  LCD.Disp.StrXY08(42,220,1,Color.Cyan, Color.Black,"S:60");
 8001704:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <main+0x344>)
 8001706:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001708:	4b64      	ldr	r3, [pc, #400]	; (800189c <main+0x35c>)
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	4b5f      	ldr	r3, [pc, #380]	; (800188c <main+0x34c>)
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <main+0x358>)
 8001712:	2201      	movs	r2, #1
 8001714:	21dc      	movs	r1, #220	; 0xdc
 8001716:	202a      	movs	r0, #42	; 0x2a
 8001718:	47a0      	blx	r4
	  			  LCD.Disp.StrXY08(25,228,1,Color.White, Color.Black,"2018051404013");
 800171a:	4b5a      	ldr	r3, [pc, #360]	; (8001884 <main+0x344>)
 800171c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800171e:	4b60      	ldr	r3, [pc, #384]	; (80018a0 <main+0x360>)
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	4b5a      	ldr	r3, [pc, #360]	; (800188c <main+0x34c>)
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <main+0x364>)
 8001728:	2201      	movs	r2, #1
 800172a:	21e4      	movs	r1, #228	; 0xe4
 800172c:	2019      	movs	r0, #25
 800172e:	47a0      	blx	r4
	  			  char stationNowStr[3];
	  			  itoa(stationNow+1,stationNowStr,10);
 8001730:	7b3b      	ldrb	r3, [r7, #12]
 8001732:	3301      	adds	r3, #1
 8001734:	1d39      	adds	r1, r7, #4
 8001736:	220a      	movs	r2, #10
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fbed 	bl	8003f18 <itoa>
	  			  LCD.Disp.StrXY16(295,220,0,Color.White, Color.Black,stationNowStr);
 800173e:	4b51      	ldr	r3, [pc, #324]	; (8001884 <main+0x344>)
 8001740:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	4b51      	ldr	r3, [pc, #324]	; (800188c <main+0x34c>)
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <main+0x364>)
 800174c:	2200      	movs	r2, #0
 800174e:	21dc      	movs	r1, #220	; 0xdc
 8001750:	f240 1027 	movw	r0, #295	; 0x127
 8001754:	47a0      	blx	r4
	  			  LCD.Disp.Rectangle(137,57,184,75,Color.White);
 8001756:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <main+0x344>)
 8001758:	69dc      	ldr	r4, [r3, #28]
 800175a:	4b52      	ldr	r3, [pc, #328]	; (80018a4 <main+0x364>)
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	234b      	movs	r3, #75	; 0x4b
 8001760:	22b8      	movs	r2, #184	; 0xb8
 8001762:	2139      	movs	r1, #57	; 0x39
 8001764:	2089      	movs	r0, #137	; 0x89
 8001766:	47a0      	blx	r4
	  			  LCD.Disp.Rectangle(0,90,319,153,Color.Black); //clear previous station display
 8001768:	4b46      	ldr	r3, [pc, #280]	; (8001884 <main+0x344>)
 800176a:	69dc      	ldr	r4, [r3, #28]
 800176c:	4b47      	ldr	r3, [pc, #284]	; (800188c <main+0x34c>)
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2399      	movs	r3, #153	; 0x99
 8001772:	f240 123f 	movw	r2, #319	; 0x13f
 8001776:	215a      	movs	r1, #90	; 0x5a
 8001778:	2000      	movs	r0, #0
 800177a:	47a0      	blx	r4
	  			  LCD.Disp.StrCenter16(58, 1, Color.Black, Color.White, Route[routeNow].Title); //display bus route
 800177c:	4b41      	ldr	r3, [pc, #260]	; (8001884 <main+0x344>)
 800177e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	493d      	ldr	r1, [pc, #244]	; (8001878 <main+0x338>)
 8001784:	4613      	mov	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3304      	adds	r3, #4
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4b43      	ldr	r3, [pc, #268]	; (80018a4 <main+0x364>)
 8001796:	4a3d      	ldr	r2, [pc, #244]	; (800188c <main+0x34c>)
 8001798:	2101      	movs	r1, #1
 800179a:	203a      	movs	r0, #58	; 0x3a
 800179c:	47a0      	blx	r4
	  			  LCD.Disp.StrCenter32(90, 1, Color.White, Color.Black, Route[routeNow].Station[stationNow]); //display station now
 800179e:	4b39      	ldr	r3, [pc, #228]	; (8001884 <main+0x344>)
 80017a0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	7b39      	ldrb	r1, [r7, #12]
 80017a6:	4834      	ldr	r0, [pc, #208]	; (8001878 <main+0x338>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	3302      	adds	r3, #2
 80017b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <main+0x34c>)
 80017bc:	4a39      	ldr	r2, [pc, #228]	; (80018a4 <main+0x364>)
 80017be:	2101      	movs	r1, #1
 80017c0:	205a      	movs	r0, #90	; 0x5a
 80017c2:	47a0      	blx	r4
	  			  LCD.Disp.StrCenter16(137, 1, Color.White, Color.Black, Route[routeNow].Station[stationNext]); //display station next
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <main+0x344>)
 80017c6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	7af9      	ldrb	r1, [r7, #11]
 80017cc:	482a      	ldr	r0, [pc, #168]	; (8001878 <main+0x338>)
 80017ce:	4613      	mov	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	440b      	add	r3, r1
 80017d8:	3302      	adds	r3, #2
 80017da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <main+0x34c>)
 80017e2:	4a30      	ldr	r2, [pc, #192]	; (80018a4 <main+0x364>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	2089      	movs	r0, #137	; 0x89
 80017e8:	47a0      	blx	r4
	  			  flagRst=0;
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <main+0x33c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
	  		  }
	  		  if(flagMode)
 80017f0:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <main+0x368>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d011      	beq.n	800181c <main+0x2dc>
	  		  {
	  			  mode=setting;
 80017f8:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <main+0x36c>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	701a      	strb	r2, [r3, #0]
	  			  Audio.Setup.Stop();
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <main+0x340>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4798      	blx	r3
	  			  LCD.Disp.CharXY16(5,220,Color.Cyan, Color.Black,"S:X");
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <main+0x344>)
 8001806:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <main+0x348>)
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <main+0x34c>)
 800180e:	4a22      	ldr	r2, [pc, #136]	; (8001898 <main+0x358>)
 8001810:	21dc      	movs	r1, #220	; 0xdc
 8001812:	2005      	movs	r0, #5
 8001814:	47a0      	blx	r4
	  			  flagMode=0;
 8001816:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <main+0x368>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
	  		  }

	  		  if(flagIn)
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <main+0x370>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d012      	beq.n	800184a <main+0x30a>
	  		  {
	  			  LCD.Disp.CharXY16(5,220,Color.Green, Color.Black,"S:X");
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <main+0x344>)
 8001826:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001828:	4b17      	ldr	r3, [pc, #92]	; (8001888 <main+0x348>)
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <main+0x34c>)
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <main+0x350>)
 8001830:	21dc      	movs	r1, #220	; 0xdc
 8001832:	2005      	movs	r0, #5
 8001834:	47a0      	blx	r4
	  			  Audio.Report.In(stationNow+1);
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <main+0x340>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	7b3a      	ldrb	r2, [r7, #12]
 800183c:	3201      	adds	r2, #1
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	4610      	mov	r0, r2
 8001842:	4798      	blx	r3
	  			  flagIn=0;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <main+0x370>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
	  		  }

	  		  if(flagOut)
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <main+0x374>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 808b 	beq.w	800196a <main+0x42a>
	  		  {
	  			  if(upNow) stationNow++;
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <main+0x322>
 800185a:	7b3b      	ldrb	r3, [r7, #12]
 800185c:	3301      	adds	r3, #1
 800185e:	733b      	strb	r3, [r7, #12]
 8001860:	e002      	b.n	8001868 <main+0x328>
	  			  else stationNow--;
 8001862:	7b3b      	ldrb	r3, [r7, #12]
 8001864:	3b01      	subs	r3, #1
 8001866:	733b      	strb	r3, [r7, #12]
	  			  if(upNext) stationNext++;
 8001868:	7b7b      	ldrb	r3, [r7, #13]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d024      	beq.n	80018b8 <main+0x378>
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	3301      	adds	r3, #1
 8001872:	72fb      	strb	r3, [r7, #11]
 8001874:	e023      	b.n	80018be <main+0x37e>
 8001876:	bf00      	nop
 8001878:	0800610c 	.word	0x0800610c
 800187c:	200000c0 	.word	0x200000c0
 8001880:	200000ac 	.word	0x200000ac
 8001884:	20000000 	.word	0x20000000
 8001888:	08004160 	.word	0x08004160
 800188c:	080060f4 	.word	0x080060f4
 8001890:	08006100 	.word	0x08006100
 8001894:	08004164 	.word	0x08004164
 8001898:	08006103 	.word	0x08006103
 800189c:	08004168 	.word	0x08004168
 80018a0:	08004170 	.word	0x08004170
 80018a4:	08006109 	.word	0x08006109
 80018a8:	200000ec 	.word	0x200000ec
 80018ac:	200000fc 	.word	0x200000fc
 80018b0:	200000f0 	.word	0x200000f0
 80018b4:	200000f4 	.word	0x200000f4
	  			  else stationNext--;
 80018b8:	7afb      	ldrb	r3, [r7, #11]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	72fb      	strb	r3, [r7, #11]
	  			  char stationNowStr[3];
	  			  itoa(stationNow+1,stationNowStr,10);
 80018be:	7b3b      	ldrb	r3, [r7, #12]
 80018c0:	3301      	adds	r3, #1
 80018c2:	4639      	mov	r1, r7
 80018c4:	220a      	movs	r2, #10
 80018c6:	4618      	mov	r0, r3
 80018c8:	f002 fb26 	bl	8003f18 <itoa>
	  			  LCD.Disp.CharXY16(5,220,Color.Red, Color.Black,"S:X");
 80018cc:	4b2f      	ldr	r3, [pc, #188]	; (800198c <main+0x44c>)
 80018ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <main+0x450>)
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <main+0x454>)
 80018d6:	4a30      	ldr	r2, [pc, #192]	; (8001998 <main+0x458>)
 80018d8:	21dc      	movs	r1, #220	; 0xdc
 80018da:	2005      	movs	r0, #5
 80018dc:	47a0      	blx	r4
	  			  LCD.Disp.StrXY16(295,220,0,Color.White, Color.Black,stationNowStr);
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <main+0x44c>)
 80018e0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80018e2:	463b      	mov	r3, r7
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <main+0x454>)
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	4b2c      	ldr	r3, [pc, #176]	; (800199c <main+0x45c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	21dc      	movs	r1, #220	; 0xdc
 80018f0:	f240 1027 	movw	r0, #295	; 0x127
 80018f4:	47a0      	blx	r4
	  			  LCD.Disp.Rectangle(0,90,319,153,Color.Black); //clear previous station display
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <main+0x44c>)
 80018f8:	69dc      	ldr	r4, [r3, #28]
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <main+0x454>)
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2399      	movs	r3, #153	; 0x99
 8001900:	f240 123f 	movw	r2, #319	; 0x13f
 8001904:	215a      	movs	r1, #90	; 0x5a
 8001906:	2000      	movs	r0, #0
 8001908:	47a0      	blx	r4
	  			  LCD.Disp.StrCenter32(90, 1, Color.White, Color.Black, Route[routeNow].Station[stationNow]); //display station now
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <main+0x44c>)
 800190c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800190e:	7bfa      	ldrb	r2, [r7, #15]
 8001910:	7b39      	ldrb	r1, [r7, #12]
 8001912:	4823      	ldr	r0, [pc, #140]	; (80019a0 <main+0x460>)
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	440b      	add	r3, r1
 800191e:	3302      	adds	r3, #2
 8001920:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <main+0x454>)
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <main+0x45c>)
 800192a:	2101      	movs	r1, #1
 800192c:	205a      	movs	r0, #90	; 0x5a
 800192e:	47a0      	blx	r4
	  			  LCD.Disp.StrCenter16(137, 1, Color.White, Color.Black, Route[routeNow].Station[stationNext]); //display station next
 8001930:	4b16      	ldr	r3, [pc, #88]	; (800198c <main+0x44c>)
 8001932:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	7af9      	ldrb	r1, [r7, #11]
 8001938:	4819      	ldr	r0, [pc, #100]	; (80019a0 <main+0x460>)
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	440b      	add	r3, r1
 8001944:	3302      	adds	r3, #2
 8001946:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <main+0x454>)
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <main+0x45c>)
 8001950:	2101      	movs	r1, #1
 8001952:	2089      	movs	r0, #137	; 0x89
 8001954:	47a0      	blx	r4
	  			  Audio.Report.Out(stationNext+1);
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <main+0x464>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	7afa      	ldrb	r2, [r7, #11]
 800195c:	3201      	adds	r2, #1
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	4610      	mov	r0, r2
 8001962:	4798      	blx	r3
	  			  flagOut=0;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <main+0x468>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
	  		  }

	  		  if(flagTips)
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <main+0x46c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <main+0x43e>
	  		  {
	  			  Audio.Report.Tips();
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <main+0x464>)
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	4798      	blx	r3
	  			  flagTips=0;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <main+0x46c>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
	  		  }
	  		  flagMode=0;
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <main+0x470>)
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
	  		  break;
 8001984:	e000      	b.n	8001988 <main+0x448>
  			  break;
 8001986:	bf00      	nop
	  switch(mode)
 8001988:	e621      	b.n	80015ce <main+0x8e>
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000
 8001990:	08004160 	.word	0x08004160
 8001994:	080060f4 	.word	0x080060f4
 8001998:	080060fa 	.word	0x080060fa
 800199c:	08006109 	.word	0x08006109
 80019a0:	0800610c 	.word	0x0800610c
 80019a4:	200000ac 	.word	0x200000ac
 80019a8:	200000f4 	.word	0x200000f4
 80019ac:	200000f8 	.word	0x200000f8
 80019b0:	200000ec 	.word	0x200000ec

080019b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b094      	sub	sp, #80	; 0x50
 80019b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	2230      	movs	r2, #48	; 0x30
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 faaa 	bl	8003f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <SystemClock_Config+0xc8>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <SystemClock_Config+0xc8>)
 80019e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e6:	6413      	str	r3, [r2, #64]	; 0x40
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <SystemClock_Config+0xc8>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <SystemClock_Config+0xcc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a20      	ldr	r2, [pc, #128]	; (8001a80 <SystemClock_Config+0xcc>)
 80019fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <SystemClock_Config+0xcc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a14:	2301      	movs	r3, #1
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a24:	2308      	movs	r3, #8
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a30:	2304      	movs	r3, #4
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fe55 	bl	80026e8 <HAL_RCC_OscConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a44:	f000 f860 	bl	8001b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a48:	230f      	movs	r3, #15
 8001a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	2103      	movs	r1, #3
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 f8b7 	bl	8002bd8 <HAL_RCC_ClockConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a70:	f000 f84a 	bl	8001b08 <Error_Handler>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3750      	adds	r7, #80	; 0x50
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000

08001a84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
	//if(HAL_GPIO_ReadPin(JQ8900_BUSY_GPIO_Port,JQ8900_BUSY_Pin)==GPIO_PIN_RESET)
	switch(GPIO_Pin)
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a94:	d020      	beq.n	8001ad8 <HAL_GPIO_EXTI_Callback+0x54>
 8001a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9a:	dc25      	bgt.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x64>
 8001a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aa0:	d01e      	beq.n	8001ae0 <HAL_GPIO_EXTI_Callback+0x5c>
 8001aa2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aa6:	dc1f      	bgt.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x64>
 8001aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aac:	d00c      	beq.n	8001ac8 <HAL_GPIO_EXTI_Callback+0x44>
 8001aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab2:	dc19      	bgt.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x64>
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_EXTI_Callback+0x3c>
 8001ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001abc:	d008      	beq.n	8001ad0 <HAL_GPIO_EXTI_Callback+0x4c>
		case B_RHT_Pin: flagTips=1; break;
		//case B_LFT_Pin: flagOut=1;  break;
		case B_MID_Pin: flagIn=1;     break;
		//case B_LFT_Pin: flag; break;
	}
}
 8001abe:	e013      	b.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x64>
		case B_RST_Pin: flagRst=1;  break;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	e00f      	b.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x64>
		case B_SET_Pin: flagMode=1; break;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e00b      	b.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x64>
		case B_UP_Pin:  flagOut=1;  break;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_GPIO_EXTI_Callback+0x78>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	e007      	b.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x64>
		case B_RHT_Pin: flagTips=1; break;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	e003      	b.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x64>
		case B_MID_Pin: flagIn=1;     break;
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x80>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	bf00      	nop
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	200000c0 	.word	0x200000c0
 8001af8:	200000ec 	.word	0x200000ec
 8001afc:	200000f4 	.word	0x200000f4
 8001b00:	200000f8 	.word	0x200000f8
 8001b04:	200000f0 	.word	0x200000f0

08001b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0c:	b672      	cpsid	i
}
 8001b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <Error_Handler+0x8>
	...

08001b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <NMI_Handler+0x4>

08001b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <MemManage_Handler+0x4>

08001b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb0:	f000 f9fc 	bl	8001fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	f000 fd7b 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001bca:	2004      	movs	r0, #4
 8001bcc:	f000 fd74 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001bd8:	2010      	movs	r0, #16
 8001bda:	f000 fd6d 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <USART1_IRQHandler+0x10>)
 8001bea:	f001 fad1 	bl	8003190 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000100 	.word	0x20000100

08001bf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001bfc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c00:	f000 fd5a 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c08:	f000 fd56 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c10:	f000 fd52 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c14:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c18:	f000 fd4e 	bl	80026b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <SystemInit+0x20>)
 8001c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2a:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <SystemInit+0x20>)
 8001c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_USART1_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c7c:	f001 f9a8 	bl	8002fd0 <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c86:	f7ff ff3f 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000100 	.word	0x20000100
 8001c94:	40011000 	.word	0x40011000

08001c98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <MX_USART2_UART_Init+0x50>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	f001 f97e 	bl	8002fd0 <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cda:	f7ff ff15 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000188 	.word	0x20000188
 8001ce8:	40004400 	.word	0x40004400

08001cec <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <MX_USART6_UART_Init+0x50>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cfc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_USART6_UART_Init+0x4c>)
 8001d24:	f001 f954 	bl	8002fd0 <HAL_UART_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d2e:	f7ff feeb 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000144 	.word	0x20000144
 8001d3c:	40011400 	.word	0x40011400

08001d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	; 0x38
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a4f      	ldr	r2, [pc, #316]	; (8001e9c <HAL_UART_MspInit+0x15c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d134      	bne.n	8001dcc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
 8001d66:	4b4e      	ldr	r3, [pc, #312]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a4d      	ldr	r2, [pc, #308]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001d6c:	f043 0310 	orr.w	r3, r3, #16
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b4b      	ldr	r3, [pc, #300]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a46      	ldr	r2, [pc, #280]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001daa:	2307      	movs	r3, #7
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	483b      	ldr	r0, [pc, #236]	; (8001ea4 <HAL_UART_MspInit+0x164>)
 8001db6:	f000 fae1 	bl	800237c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2025      	movs	r0, #37	; 0x25
 8001dc0:	f000 fa13 	bl	80021ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dc4:	2025      	movs	r0, #37	; 0x25
 8001dc6:	f000 fa2c 	bl	8002222 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001dca:	e063      	b.n	8001e94 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <HAL_UART_MspInit+0x168>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d12c      	bne.n	8001e30 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e0e:	230c      	movs	r3, #12
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e26:	4619      	mov	r1, r3
 8001e28:	4820      	ldr	r0, [pc, #128]	; (8001eac <HAL_UART_MspInit+0x16c>)
 8001e2a:	f000 faa7 	bl	800237c <HAL_GPIO_Init>
}
 8001e2e:	e031      	b.n	8001e94 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART6)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_UART_MspInit+0x170>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d12c      	bne.n	8001e94 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a17      	ldr	r2, [pc, #92]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001e44:	f043 0320 	orr.w	r3, r3, #32
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_UART_MspInit+0x160>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e84:	2308      	movs	r3, #8
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4807      	ldr	r0, [pc, #28]	; (8001eac <HAL_UART_MspInit+0x16c>)
 8001e90:	f000 fa74 	bl	800237c <HAL_GPIO_Init>
}
 8001e94:	bf00      	nop
 8001e96:	3738      	adds	r7, #56	; 0x38
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020400 	.word	0x40020400
 8001ea8:	40004400 	.word	0x40004400
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40011400 	.word	0x40011400

08001eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eb8:	480d      	ldr	r0, [pc, #52]	; (8001ef0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eba:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ed0:	4c0b      	ldr	r4, [pc, #44]	; (8001f00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ede:	f7ff fe9f 	bl	8001c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee2:	f001 ffdd 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee6:	f7ff fb2b 	bl	8001540 <main>
  bx  lr    
 8001eea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001ef8:	080061ec 	.word	0x080061ec
  ldr r2, =_sbss
 8001efc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001f00:	200001d0 	.word	0x200001d0

08001f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <HAL_Init+0x40>)
 8001f12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_Init+0x40>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_Init+0x40>)
 8001f1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_Init+0x40>)
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f30:	2003      	movs	r0, #3
 8001f32:	f000 f94f 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f000 f808 	bl	8001f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f3c:	f7ff fdea 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023c00 	.word	0x40023c00

08001f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_InitTick+0x54>)
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <HAL_InitTick+0x58>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f967 	bl	800223e <HAL_SYSTICK_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00e      	b.n	8001f98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d80a      	bhi.n	8001f96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f80:	2200      	movs	r2, #0
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f000 f92f 	bl	80021ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f8c:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <HAL_InitTick+0x5c>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200000c4 	.word	0x200000c4
 8001fa4:	200000cc 	.word	0x200000cc
 8001fa8:	200000c8 	.word	0x200000c8

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	200000cc 	.word	0x200000cc
 8001fd0:	200001cc 	.word	0x200001cc

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200001cc 	.word	0x200001cc

08001fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff ffee 	bl	8001fd4 <HAL_GetTick>
 8001ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002004:	d005      	beq.n	8002012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_Delay+0x44>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002012:	bf00      	nop
 8002014:	f7ff ffde 	bl	8001fd4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d8f7      	bhi.n	8002014 <HAL_Delay+0x28>
  {
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200000cc 	.word	0x200000cc

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800205c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <__NVIC_EnableIRQ+0x38>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	; (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	; (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	; 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a0:	d301      	bcc.n	80021a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021a2:	2301      	movs	r3, #1
 80021a4:	e00f      	b.n	80021c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <SysTick_Config+0x40>)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ae:	210f      	movs	r1, #15
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	f7ff ff8e 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <SysTick_Config+0x40>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <SysTick_Config+0x40>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	e000e010 	.word	0xe000e010

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff29 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff3e 	bl	800207c <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ff8e 	bl	8002128 <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff5d 	bl	80020d4 <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff31 	bl	8002098 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ffa2 	bl	8002190 <SysTick_Config>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff feb6 	bl	8001fd4 <HAL_GetTick>
 8002268:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d008      	beq.n	8002288 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2280      	movs	r2, #128	; 0x80
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e052      	b.n	800232e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0216 	bic.w	r2, r2, #22
 8002296:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <HAL_DMA_Abort+0x62>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0208 	bic.w	r2, r2, #8
 80022c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d8:	e013      	b.n	8002302 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022da:	f7ff fe7b 	bl	8001fd4 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	d90c      	bls.n	8002302 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2203      	movs	r2, #3
 80022f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e015      	b.n	800232e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e4      	bne.n	80022da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002314:	223f      	movs	r2, #63	; 0x3f
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d004      	beq.n	8002354 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e00c      	b.n	800236e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2205      	movs	r2, #5
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	; 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
 8002396:	e159      	b.n	800264c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002398:	2201      	movs	r2, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4013      	ands	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8148 	bne.w	8002646 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d005      	beq.n	80023ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d130      	bne.n	8002430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 0201 	and.w	r2, r3, #1
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	2b03      	cmp	r3, #3
 800243a:	d017      	beq.n	800246c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d123      	bne.n	80024c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	08da      	lsrs	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3208      	adds	r2, #8
 8002480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	08da      	lsrs	r2, r3, #3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3208      	adds	r2, #8
 80024ba:	69b9      	ldr	r1, [r7, #24]
 80024bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80a2 	beq.w	8002646 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_GPIO_Init+0x2e8>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a56      	ldr	r2, [pc, #344]	; (8002664 <HAL_GPIO_Init+0x2e8>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b54      	ldr	r3, [pc, #336]	; (8002664 <HAL_GPIO_Init+0x2e8>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251e:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_GPIO_Init+0x2ec>)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4013      	ands	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a49      	ldr	r2, [pc, #292]	; (800266c <HAL_GPIO_Init+0x2f0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x202>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a48      	ldr	r2, [pc, #288]	; (8002670 <HAL_GPIO_Init+0x2f4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x1fe>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a47      	ldr	r2, [pc, #284]	; (8002674 <HAL_GPIO_Init+0x2f8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x1fa>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a46      	ldr	r2, [pc, #280]	; (8002678 <HAL_GPIO_Init+0x2fc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x1f6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a45      	ldr	r2, [pc, #276]	; (800267c <HAL_GPIO_Init+0x300>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x1f2>
 800256a:	2304      	movs	r3, #4
 800256c:	e008      	b.n	8002580 <HAL_GPIO_Init+0x204>
 800256e:	2307      	movs	r3, #7
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x204>
 8002572:	2303      	movs	r3, #3
 8002574:	e004      	b.n	8002580 <HAL_GPIO_Init+0x204>
 8002576:	2302      	movs	r3, #2
 8002578:	e002      	b.n	8002580 <HAL_GPIO_Init+0x204>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x204>
 800257e:	2300      	movs	r3, #0
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	f002 0203 	and.w	r2, r2, #3
 8002586:	0092      	lsls	r2, r2, #2
 8002588:	4093      	lsls	r3, r2
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002590:	4935      	ldr	r1, [pc, #212]	; (8002668 <HAL_GPIO_Init+0x2ec>)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3302      	adds	r3, #2
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c2:	4a2f      	ldr	r2, [pc, #188]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025c8:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ec:	4a24      	ldr	r2, [pc, #144]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_GPIO_Init+0x304>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002616:	4a1a      	ldr	r2, [pc, #104]	; (8002680 <HAL_GPIO_Init+0x304>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800261c:	4b18      	ldr	r3, [pc, #96]	; (8002680 <HAL_GPIO_Init+0x304>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_GPIO_Init+0x304>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	2b0f      	cmp	r3, #15
 8002650:	f67f aea2 	bls.w	8002398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	40013800 	.word	0x40013800
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400
 8002674:	40020800 	.word	0x40020800
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40021000 	.word	0x40021000
 8002680:	40013c00 	.word	0x40013c00

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a0:	e003      	b.n	80026aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	041a      	lsls	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	4603      	mov	r3, r0
 80026c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ce:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026d0:	88fb      	ldrh	r3, [r7, #6]
 80026d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f9d4 	bl	8001a84 <HAL_GPIO_EXTI_Callback>
  }
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e264      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d075      	beq.n	80027f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002706:	4ba3      	ldr	r3, [pc, #652]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b04      	cmp	r3, #4
 8002710:	d00c      	beq.n	800272c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4ba0      	ldr	r3, [pc, #640]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800271a:	2b08      	cmp	r3, #8
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b9d      	ldr	r3, [pc, #628]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4b99      	ldr	r3, [pc, #612]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05b      	beq.n	80027f0 <HAL_RCC_OscConfig+0x108>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d157      	bne.n	80027f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e23f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x74>
 800274e:	4b91      	ldr	r3, [pc, #580]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a90      	ldr	r2, [pc, #576]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e01d      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x98>
 8002766:	4b8b      	ldr	r3, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a8a      	ldr	r2, [pc, #552]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b88      	ldr	r3, [pc, #544]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a87      	ldr	r2, [pc, #540]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 8002780:	4b84      	ldr	r3, [pc, #528]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a83      	ldr	r2, [pc, #524]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b81      	ldr	r3, [pc, #516]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a80      	ldr	r2, [pc, #512]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff fc18 	bl	8001fd4 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a8:	f7ff fc14 	bl	8001fd4 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e204      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b76      	ldr	r3, [pc, #472]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0xc0>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7ff fc04 	bl	8001fd4 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d0:	f7ff fc00 	bl	8001fd4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	; 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e1f0      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	4b6c      	ldr	r3, [pc, #432]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0xe8>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d063      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fe:	4b65      	ldr	r3, [pc, #404]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b62      	ldr	r3, [pc, #392]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002812:	2b08      	cmp	r3, #8
 8002814:	d11c      	bne.n	8002850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002816:	4b5f      	ldr	r3, [pc, #380]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d116      	bne.n	8002850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	4b5c      	ldr	r3, [pc, #368]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_RCC_OscConfig+0x152>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e1c4      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283a:	4b56      	ldr	r3, [pc, #344]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4952      	ldr	r1, [pc, #328]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	e03a      	b.n	80028c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002858:	4b4f      	ldr	r3, [pc, #316]	; (8002998 <HAL_RCC_OscConfig+0x2b0>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7ff fbb9 	bl	8001fd4 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002866:	f7ff fbb5 	bl	8001fd4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1a5      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	4b46      	ldr	r3, [pc, #280]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4940      	ldr	r1, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
 8002898:	e015      	b.n	80028c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289a:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCC_OscConfig+0x2b0>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff fb98 	bl	8001fd4 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a8:	f7ff fb94 	bl	8001fd4 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e184      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d030      	beq.n	8002934 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028da:	4b30      	ldr	r3, [pc, #192]	; (800299c <HAL_RCC_OscConfig+0x2b4>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7ff fb78 	bl	8001fd4 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e8:	f7ff fb74 	bl	8001fd4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e164      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	4b26      	ldr	r3, [pc, #152]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x200>
 8002906:	e015      	b.n	8002934 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCC_OscConfig+0x2b4>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7ff fb61 	bl	8001fd4 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002916:	f7ff fb5d 	bl	8001fd4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e14d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a0 	beq.w	8002a82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10f      	bne.n	8002972 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_OscConfig+0x2b8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d121      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCC_OscConfig+0x2b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_RCC_OscConfig+0x2b8>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7ff fb23 	bl	8001fd4 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002990:	e011      	b.n	80029b6 <HAL_RCC_OscConfig+0x2ce>
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800
 8002998:	42470000 	.word	0x42470000
 800299c:	42470e80 	.word	0x42470e80
 80029a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a4:	f7ff fb16 	bl	8001fd4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e106      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b85      	ldr	r3, [pc, #532]	; (8002bcc <HAL_RCC_OscConfig+0x4e4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d106      	bne.n	80029d8 <HAL_RCC_OscConfig+0x2f0>
 80029ca:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a80      	ldr	r2, [pc, #512]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	e01c      	b.n	8002a12 <HAL_RCC_OscConfig+0x32a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d10c      	bne.n	80029fa <HAL_RCC_OscConfig+0x312>
 80029e0:	4b7b      	ldr	r3, [pc, #492]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a7a      	ldr	r2, [pc, #488]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	4b78      	ldr	r3, [pc, #480]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a77      	ldr	r2, [pc, #476]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	e00b      	b.n	8002a12 <HAL_RCC_OscConfig+0x32a>
 80029fa:	4b75      	ldr	r3, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a74      	ldr	r2, [pc, #464]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	4b72      	ldr	r3, [pc, #456]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a71      	ldr	r2, [pc, #452]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d015      	beq.n	8002a46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7ff fadb 	bl	8001fd4 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7ff fad7 	bl	8001fd4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0c5      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a38:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ee      	beq.n	8002a22 <HAL_RCC_OscConfig+0x33a>
 8002a44:	e014      	b.n	8002a70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a46:	f7ff fac5 	bl	8001fd4 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7ff fac1 	bl	8001fd4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e0af      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a64:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ee      	bne.n	8002a4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d105      	bne.n	8002a82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a76:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a55      	ldr	r2, [pc, #340]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 809b 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a8c:	4b50      	ldr	r3, [pc, #320]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d05c      	beq.n	8002b52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d141      	bne.n	8002b24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <HAL_RCC_OscConfig+0x4ec>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7ff fa95 	bl	8001fd4 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aae:	f7ff fa91 	bl	8001fd4 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e081      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	019b      	lsls	r3, r3, #6
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	061b      	lsls	r3, r3, #24
 8002af0:	4937      	ldr	r1, [pc, #220]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af6:	4b37      	ldr	r3, [pc, #220]	; (8002bd4 <HAL_RCC_OscConfig+0x4ec>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7ff fa6a 	bl	8001fd4 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b04:	f7ff fa66 	bl	8001fd4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e056      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x41c>
 8002b22:	e04e      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b24:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x4ec>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7ff fa53 	bl	8001fd4 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b32:	f7ff fa4f 	bl	8001fd4 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e03f      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b44:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1f0      	bne.n	8002b32 <HAL_RCC_OscConfig+0x44a>
 8002b50:	e037      	b.n	8002bc2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e032      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b5e:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_RCC_OscConfig+0x4e8>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d028      	beq.n	8002bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d121      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d11a      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d111      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d001      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40007000 	.word	0x40007000
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470060 	.word	0x42470060

08002bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0cc      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b68      	ldr	r3, [pc, #416]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d90c      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b63      	ldr	r3, [pc, #396]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0b8      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c2c:	4b59      	ldr	r3, [pc, #356]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a58      	ldr	r2, [pc, #352]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c44:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a52      	ldr	r2, [pc, #328]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	494d      	ldr	r1, [pc, #308]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d044      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d119      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e07f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d003      	beq.n	8002c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e067      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4934      	ldr	r1, [pc, #208]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc8:	f7ff f984 	bl	8001fd4 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7ff f980 	bl	8001fd4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e04f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 020c 	and.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1eb      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d20c      	bcs.n	8002d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e032      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4916      	ldr	r1, [pc, #88]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	490e      	ldr	r1, [pc, #56]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d5e:	f000 f821 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	490a      	ldr	r1, [pc, #40]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d70:	5ccb      	ldrb	r3, [r1, r3]
 8002d72:	fa22 f303 	lsr.w	r3, r2, r3
 8002d76:	4a09      	ldr	r2, [pc, #36]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f8e4 	bl	8001f4c <HAL_InitTick>

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00
 8002d94:	40023800 	.word	0x40023800
 8002d98:	0800619c 	.word	0x0800619c
 8002d9c:	200000c4 	.word	0x200000c4
 8002da0:	200000c8 	.word	0x200000c8

08002da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	607b      	str	r3, [r7, #4]
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	2300      	movs	r3, #0
 8002db6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dbc:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d00d      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x40>
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	f200 80bd 	bhi.w	8002f48 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x3a>
 8002dd6:	e0b7      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dda:	60bb      	str	r3, [r7, #8]
       break;
 8002ddc:	e0b7      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002de0:	60bb      	str	r3, [r7, #8]
      break;
 8002de2:	e0b4      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de4:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dee:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d04d      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfa:	4b58      	ldr	r3, [pc, #352]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	461a      	mov	r2, r3
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	ea02 0800 	and.w	r8, r2, r0
 8002e12:	ea03 0901 	and.w	r9, r3, r1
 8002e16:	4640      	mov	r0, r8
 8002e18:	4649      	mov	r1, r9
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	014b      	lsls	r3, r1, #5
 8002e24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e28:	0142      	lsls	r2, r0, #5
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	ebb0 0008 	subs.w	r0, r0, r8
 8002e32:	eb61 0109 	sbc.w	r1, r1, r9
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	018b      	lsls	r3, r1, #6
 8002e40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e44:	0182      	lsls	r2, r0, #6
 8002e46:	1a12      	subs	r2, r2, r0
 8002e48:	eb63 0301 	sbc.w	r3, r3, r1
 8002e4c:	f04f 0000 	mov.w	r0, #0
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	00d9      	lsls	r1, r3, #3
 8002e56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e5a:	00d0      	lsls	r0, r2, #3
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	eb12 0208 	adds.w	r2, r2, r8
 8002e64:	eb43 0309 	adc.w	r3, r3, r9
 8002e68:	f04f 0000 	mov.w	r0, #0
 8002e6c:	f04f 0100 	mov.w	r1, #0
 8002e70:	0259      	lsls	r1, r3, #9
 8002e72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002e76:	0250      	lsls	r0, r2, #9
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	f7fd f9a6 	bl	80001d8 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4613      	mov	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	e04a      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e96:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	099b      	lsrs	r3, r3, #6
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	ea02 0400 	and.w	r4, r2, r0
 8002eae:	ea03 0501 	and.w	r5, r3, r1
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	014b      	lsls	r3, r1, #5
 8002ec0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ec4:	0142      	lsls	r2, r0, #5
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	1b00      	subs	r0, r0, r4
 8002ecc:	eb61 0105 	sbc.w	r1, r1, r5
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	018b      	lsls	r3, r1, #6
 8002eda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ede:	0182      	lsls	r2, r0, #6
 8002ee0:	1a12      	subs	r2, r2, r0
 8002ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ee6:	f04f 0000 	mov.w	r0, #0
 8002eea:	f04f 0100 	mov.w	r1, #0
 8002eee:	00d9      	lsls	r1, r3, #3
 8002ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ef4:	00d0      	lsls	r0, r2, #3
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	1912      	adds	r2, r2, r4
 8002efc:	eb45 0303 	adc.w	r3, r5, r3
 8002f00:	f04f 0000 	mov.w	r0, #0
 8002f04:	f04f 0100 	mov.w	r1, #0
 8002f08:	0299      	lsls	r1, r3, #10
 8002f0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f0e:	0290      	lsls	r0, r2, #10
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	f7fd f95a 	bl	80001d8 <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4613      	mov	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	3301      	adds	r3, #1
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	60bb      	str	r3, [r7, #8]
      break;
 8002f46:	e002      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f4a:	60bb      	str	r3, [r7, #8]
      break;
 8002f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	00f42400 	.word	0x00f42400
 8002f64:	007a1200 	.word	0x007a1200

08002f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	200000c4 	.word	0x200000c4

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f84:	f7ff fff0 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	0a9b      	lsrs	r3, r3, #10
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	; (8002fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	080061ac 	.word	0x080061ac

08002fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fac:	f7ff ffdc 	bl	8002f68 <HAL_RCC_GetHCLKFreq>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	0b5b      	lsrs	r3, r3, #13
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	4903      	ldr	r1, [pc, #12]	; (8002fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fbe:	5ccb      	ldrb	r3, [r1, r3]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	080061ac 	.word	0x080061ac

08002fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e03f      	b.n	8003062 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d106      	bne.n	8002ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fe fea2 	bl	8001d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2224      	movs	r2, #36	; 0x24
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fd7b 	bl	8003b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b08a      	sub	sp, #40	; 0x28
 800306e:	af02      	add	r7, sp, #8
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	d17c      	bne.n	8003184 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_UART_Transmit+0x2c>
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e075      	b.n	8003186 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_UART_Transmit+0x3e>
 80030a4:	2302      	movs	r3, #2
 80030a6:	e06e      	b.n	8003186 <HAL_UART_Transmit+0x11c>
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2221      	movs	r2, #33	; 0x21
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030be:	f7fe ff89 	bl	8001fd4 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	88fa      	ldrh	r2, [r7, #6]
 80030c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d8:	d108      	bne.n	80030ec <HAL_UART_Transmit+0x82>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d104      	bne.n	80030ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	e003      	b.n	80030f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030fc:	e02a      	b.n	8003154 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2200      	movs	r2, #0
 8003106:	2180      	movs	r1, #128	; 0x80
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 faf9 	bl	8003700 <UART_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e036      	b.n	8003186 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10b      	bne.n	8003136 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800312c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3302      	adds	r3, #2
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e007      	b.n	8003146 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	3301      	adds	r3, #1
 8003144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1cf      	bne.n	80030fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	2140      	movs	r1, #64	; 0x40
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fac9 	bl	8003700 <UART_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e006      	b.n	8003186 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003184:	2302      	movs	r3, #2
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b0ba      	sub	sp, #232	; 0xe8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10f      	bne.n	80031f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_UART_IRQHandler+0x66>
 80031e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fbd3 	bl	800399a <UART_Receive_IT>
      return;
 80031f4:	e256      	b.n	80036a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80de 	beq.w	80033bc <HAL_UART_IRQHandler+0x22c>
 8003200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d106      	bne.n	800321a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003210:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80d1 	beq.w	80033bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800321a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <HAL_UART_IRQHandler+0xae>
 8003226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800323e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HAL_UART_IRQHandler+0xd2>
 800324a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f043 0202 	orr.w	r2, r3, #2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_UART_IRQHandler+0xf6>
 800326e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f043 0204 	orr.w	r2, r3, #4
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d011      	beq.n	80032b6 <HAL_UART_IRQHandler+0x126>
 8003292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800329e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f043 0208 	orr.w	r2, r3, #8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 81ed 	beq.w	800369a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_UART_IRQHandler+0x14e>
 80032cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fb5e 	bl	800399a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695b      	ldr	r3, [r3, #20]
 80032e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e8:	2b40      	cmp	r3, #64	; 0x40
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d103      	bne.n	800330a <HAL_UART_IRQHandler+0x17a>
 8003302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003306:	2b00      	cmp	r3, #0
 8003308:	d04f      	beq.n	80033aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fa66 	bl	80037dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d141      	bne.n	80033a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3314      	adds	r3, #20
 8003324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	3314      	adds	r3, #20
 8003346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800334a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800334e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1d9      	bne.n	800331e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	2b00      	cmp	r3, #0
 8003370:	d013      	beq.n	800339a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	4a7d      	ldr	r2, [pc, #500]	; (800356c <HAL_UART_IRQHandler+0x3dc>)
 8003378:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe ffd9 	bl	8002336 <HAL_DMA_Abort_IT>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003394:	4610      	mov	r0, r2
 8003396:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	e00e      	b.n	80033b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f99a 	bl	80036d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	e00a      	b.n	80033b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f996 	bl	80036d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	e006      	b.n	80033b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f992 	bl	80036d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033b6:	e170      	b.n	800369a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	bf00      	nop
    return;
 80033ba:	e16e      	b.n	800369a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	f040 814a 	bne.w	800365a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 8143 	beq.w	800365a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 813c 	beq.w	800365a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	f040 80b4 	bne.w	8003570 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003414:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8140 	beq.w	800369e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003426:	429a      	cmp	r2, r3
 8003428:	f080 8139 	bcs.w	800369e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003432:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343e:	f000 8088 	beq.w	8003552 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800345c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800346e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800347a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1d9      	bne.n	8003442 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3314      	adds	r3, #20
 8003494:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800349e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3314      	adds	r3, #20
 80034ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e1      	bne.n	800348e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3314      	adds	r3, #20
 80034d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3314      	adds	r3, #20
 80034ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034f6:	e841 2300 	strex	r3, r2, [r1]
 80034fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e3      	bne.n	80034ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003522:	f023 0310 	bic.w	r3, r3, #16
 8003526:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	330c      	adds	r3, #12
 8003530:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003534:	65ba      	str	r2, [r7, #88]	; 0x58
 8003536:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800353a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e3      	bne.n	8003510 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fe82 	bl	8002256 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800355a:	b29b      	uxth	r3, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	b29b      	uxth	r3, r3
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f8c0 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003568:	e099      	b.n	800369e <HAL_UART_IRQHandler+0x50e>
 800356a:	bf00      	nop
 800356c:	080038a3 	.word	0x080038a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003578:	b29b      	uxth	r3, r3
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 808b 	beq.w	80036a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800358c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8086 	beq.w	80036a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	330c      	adds	r3, #12
 80035b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035ba:	647a      	str	r2, [r7, #68]	; 0x44
 80035bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e3      	bne.n	8003596 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3314      	adds	r3, #20
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	623b      	str	r3, [r7, #32]
   return(result);
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035f2:	633a      	str	r2, [r7, #48]	; 0x30
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e3      	bne.n	80035ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	e853 3f00 	ldrex	r3, [r3]
 8003622:	60fb      	str	r3, [r7, #12]
   return(result);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f023 0310 	bic.w	r3, r3, #16
 800362a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	330c      	adds	r3, #12
 8003634:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003638:	61fa      	str	r2, [r7, #28]
 800363a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	69b9      	ldr	r1, [r7, #24]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	617b      	str	r3, [r7, #20]
   return(result);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e3      	bne.n	8003614 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800364c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f848 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003658:	e023      	b.n	80036a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800365a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_UART_IRQHandler+0x4ea>
 8003666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f929 	bl	80038ca <UART_Transmit_IT>
    return;
 8003678:	e014      	b.n	80036a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800367a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00e      	beq.n	80036a4 <HAL_UART_IRQHandler+0x514>
 8003686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f969 	bl	800396a <UART_EndTransmit_IT>
    return;
 8003698:	e004      	b.n	80036a4 <HAL_UART_IRQHandler+0x514>
    return;
 800369a:	bf00      	nop
 800369c:	e002      	b.n	80036a4 <HAL_UART_IRQHandler+0x514>
      return;
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <HAL_UART_IRQHandler+0x514>
      return;
 80036a2:	bf00      	nop
  }
}
 80036a4:	37e8      	adds	r7, #232	; 0xe8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop

080036ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b090      	sub	sp, #64	; 0x40
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	4613      	mov	r3, r2
 800370e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003710:	e050      	b.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d04c      	beq.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800371a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <UART_WaitOnFlagUntilTimeout+0x30>
 8003720:	f7fe fc58 	bl	8001fd4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800372c:	429a      	cmp	r2, r3
 800372e:	d241      	bcs.n	80037b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	330c      	adds	r3, #12
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003750:	637a      	str	r2, [r7, #52]	; 0x34
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003756:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3314      	adds	r3, #20
 800376a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	e853 3f00 	ldrex	r3, [r3]
 8003772:	613b      	str	r3, [r7, #16]
   return(result);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3314      	adds	r3, #20
 8003782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003784:	623a      	str	r2, [r7, #32]
 8003786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	69f9      	ldr	r1, [r7, #28]
 800378a:	6a3a      	ldr	r2, [r7, #32]
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	61bb      	str	r3, [r7, #24]
   return(result);
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e5      	bne.n	8003764 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e00f      	b.n	80037d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d09f      	beq.n	8003712 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3740      	adds	r7, #64	; 0x40
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b095      	sub	sp, #84	; 0x54
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003804:	643a      	str	r2, [r7, #64]	; 0x40
 8003806:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800380a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e5      	bne.n	80037e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3314      	adds	r3, #20
 800381e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	61fb      	str	r3, [r7, #28]
   return(result);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f023 0301 	bic.w	r3, r3, #1
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3314      	adds	r3, #20
 8003836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003838:	62fa      	str	r2, [r7, #44]	; 0x2c
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800383e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003840:	e841 2300 	strex	r3, r2, [r1]
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e5      	bne.n	8003818 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	2b01      	cmp	r3, #1
 8003852:	d119      	bne.n	8003888 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	e853 3f00 	ldrex	r3, [r3]
 8003862:	60bb      	str	r3, [r7, #8]
   return(result);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f023 0310 	bic.w	r3, r3, #16
 800386a:	647b      	str	r3, [r7, #68]	; 0x44
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003874:	61ba      	str	r2, [r7, #24]
 8003876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6979      	ldr	r1, [r7, #20]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	613b      	str	r3, [r7, #16]
   return(result);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e5      	bne.n	8003854 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003896:	bf00      	nop
 8003898:	3754      	adds	r7, #84	; 0x54
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff ff09 	bl	80036d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b21      	cmp	r3, #33	; 0x21
 80038dc:	d13e      	bne.n	800395c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e6:	d114      	bne.n	8003912 <UART_Transmit_IT+0x48>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d110      	bne.n	8003912 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003904:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	621a      	str	r2, [r3, #32]
 8003910:	e008      	b.n	8003924 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	1c59      	adds	r1, r3, #1
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6211      	str	r1, [r2, #32]
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29b      	uxth	r3, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4619      	mov	r1, r3
 8003932:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10f      	bne.n	8003958 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003946:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003956:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003980:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fe8e 	bl	80036ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b08c      	sub	sp, #48	; 0x30
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b22      	cmp	r3, #34	; 0x22
 80039ac:	f040 80ab 	bne.w	8003b06 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d117      	bne.n	80039ea <UART_Receive_IT+0x50>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d113      	bne.n	80039ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	1c9a      	adds	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
 80039e8:	e026      	b.n	8003a38 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80039f0:	2300      	movs	r3, #0
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fc:	d007      	beq.n	8003a0e <UART_Receive_IT+0x74>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <UART_Receive_IT+0x82>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e008      	b.n	8003a2e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4619      	mov	r1, r3
 8003a46:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d15a      	bne.n	8003b02 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0220 	bic.w	r2, r2, #32
 8003a5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d135      	bne.n	8003af8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	330c      	adds	r3, #12
 8003a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f023 0310 	bic.w	r3, r3, #16
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	330c      	adds	r3, #12
 8003ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab2:	623a      	str	r2, [r7, #32]
 8003ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	69f9      	ldr	r1, [r7, #28]
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e5      	bne.n	8003a92 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d10a      	bne.n	8003aea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aee:	4619      	mov	r1, r3
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff fdf9 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
 8003af6:	e002      	b.n	8003afe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fde1 	bl	80036c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e002      	b.n	8003b08 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3730      	adds	r7, #48	; 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b14:	b09f      	sub	sp, #124	; 0x7c
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b26:	68d9      	ldr	r1, [r3, #12]
 8003b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	ea40 0301 	orr.w	r3, r0, r1
 8003b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b54:	f021 010c 	bic.w	r1, r1, #12
 8003b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6e:	6999      	ldr	r1, [r3, #24]
 8003b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	ea40 0301 	orr.w	r3, r0, r1
 8003b78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4bc5      	ldr	r3, [pc, #788]	; (8003e94 <UART_SetConfig+0x384>)
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d004      	beq.n	8003b8e <UART_SetConfig+0x7e>
 8003b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4bc3      	ldr	r3, [pc, #780]	; (8003e98 <UART_SetConfig+0x388>)
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d103      	bne.n	8003b96 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b8e:	f7ff fa0b 	bl	8002fa8 <HAL_RCC_GetPCLK2Freq>
 8003b92:	6778      	str	r0, [r7, #116]	; 0x74
 8003b94:	e002      	b.n	8003b9c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b96:	f7ff f9f3 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8003b9a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba4:	f040 80b6 	bne.w	8003d14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003baa:	461c      	mov	r4, r3
 8003bac:	f04f 0500 	mov.w	r5, #0
 8003bb0:	4622      	mov	r2, r4
 8003bb2:	462b      	mov	r3, r5
 8003bb4:	1891      	adds	r1, r2, r2
 8003bb6:	6439      	str	r1, [r7, #64]	; 0x40
 8003bb8:	415b      	adcs	r3, r3
 8003bba:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bc0:	1912      	adds	r2, r2, r4
 8003bc2:	eb45 0303 	adc.w	r3, r5, r3
 8003bc6:	f04f 0000 	mov.w	r0, #0
 8003bca:	f04f 0100 	mov.w	r1, #0
 8003bce:	00d9      	lsls	r1, r3, #3
 8003bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bd4:	00d0      	lsls	r0, r2, #3
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	1911      	adds	r1, r2, r4
 8003bdc:	6639      	str	r1, [r7, #96]	; 0x60
 8003bde:	416b      	adcs	r3, r5
 8003be0:	667b      	str	r3, [r7, #100]	; 0x64
 8003be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f04f 0300 	mov.w	r3, #0
 8003bec:	1891      	adds	r1, r2, r2
 8003bee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bf0:	415b      	adcs	r3, r3
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bf8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003bfc:	f7fc faec 	bl	80001d8 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4ba5      	ldr	r3, [pc, #660]	; (8003e9c <UART_SetConfig+0x38c>)
 8003c06:	fba3 2302 	umull	r2, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	011e      	lsls	r6, r3, #4
 8003c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c10:	461c      	mov	r4, r3
 8003c12:	f04f 0500 	mov.w	r5, #0
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	1891      	adds	r1, r2, r2
 8003c1c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c1e:	415b      	adcs	r3, r3
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
 8003c22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c26:	1912      	adds	r2, r2, r4
 8003c28:	eb45 0303 	adc.w	r3, r5, r3
 8003c2c:	f04f 0000 	mov.w	r0, #0
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	00d9      	lsls	r1, r3, #3
 8003c36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c3a:	00d0      	lsls	r0, r2, #3
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	1911      	adds	r1, r2, r4
 8003c42:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c44:	416b      	adcs	r3, r5
 8003c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	1891      	adds	r1, r2, r2
 8003c54:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c56:	415b      	adcs	r3, r3
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c62:	f7fc fab9 	bl	80001d8 <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4b8c      	ldr	r3, [pc, #560]	; (8003e9c <UART_SetConfig+0x38c>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	; 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	3332      	adds	r3, #50	; 0x32
 8003c7e:	4a87      	ldr	r2, [pc, #540]	; (8003e9c <UART_SetConfig+0x38c>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c8c:	441e      	add	r6, r3
 8003c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c90:	4618      	mov	r0, r3
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	1894      	adds	r4, r2, r2
 8003c9c:	623c      	str	r4, [r7, #32]
 8003c9e:	415b      	adcs	r3, r3
 8003ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ca6:	1812      	adds	r2, r2, r0
 8003ca8:	eb41 0303 	adc.w	r3, r1, r3
 8003cac:	f04f 0400 	mov.w	r4, #0
 8003cb0:	f04f 0500 	mov.w	r5, #0
 8003cb4:	00dd      	lsls	r5, r3, #3
 8003cb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cba:	00d4      	lsls	r4, r2, #3
 8003cbc:	4622      	mov	r2, r4
 8003cbe:	462b      	mov	r3, r5
 8003cc0:	1814      	adds	r4, r2, r0
 8003cc2:	653c      	str	r4, [r7, #80]	; 0x50
 8003cc4:	414b      	adcs	r3, r1
 8003cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	1891      	adds	r1, r2, r2
 8003cd4:	61b9      	str	r1, [r7, #24]
 8003cd6:	415b      	adcs	r3, r3
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cde:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ce2:	f7fc fa79 	bl	80001d8 <__aeabi_uldivmod>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4b6c      	ldr	r3, [pc, #432]	; (8003e9c <UART_SetConfig+0x38c>)
 8003cec:	fba3 1302 	umull	r1, r3, r3, r2
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	2164      	movs	r1, #100	; 0x64
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	3332      	adds	r3, #50	; 0x32
 8003cfe:	4a67      	ldr	r2, [pc, #412]	; (8003e9c <UART_SetConfig+0x38c>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	f003 0207 	and.w	r2, r3, #7
 8003d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4432      	add	r2, r6
 8003d10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d12:	e0b9      	b.n	8003e88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d16:	461c      	mov	r4, r3
 8003d18:	f04f 0500 	mov.w	r5, #0
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	462b      	mov	r3, r5
 8003d20:	1891      	adds	r1, r2, r2
 8003d22:	6139      	str	r1, [r7, #16]
 8003d24:	415b      	adcs	r3, r3
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d2c:	1912      	adds	r2, r2, r4
 8003d2e:	eb45 0303 	adc.w	r3, r5, r3
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f04f 0100 	mov.w	r1, #0
 8003d3a:	00d9      	lsls	r1, r3, #3
 8003d3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d40:	00d0      	lsls	r0, r2, #3
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	eb12 0804 	adds.w	r8, r2, r4
 8003d4a:	eb43 0905 	adc.w	r9, r3, r5
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	008b      	lsls	r3, r1, #2
 8003d62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d66:	0082      	lsls	r2, r0, #2
 8003d68:	4640      	mov	r0, r8
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	f7fc fa34 	bl	80001d8 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <UART_SetConfig+0x38c>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	011e      	lsls	r6, r3, #4
 8003d7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d80:	4618      	mov	r0, r3
 8003d82:	f04f 0100 	mov.w	r1, #0
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	1894      	adds	r4, r2, r2
 8003d8c:	60bc      	str	r4, [r7, #8]
 8003d8e:	415b      	adcs	r3, r3
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d96:	1812      	adds	r2, r2, r0
 8003d98:	eb41 0303 	adc.w	r3, r1, r3
 8003d9c:	f04f 0400 	mov.w	r4, #0
 8003da0:	f04f 0500 	mov.w	r5, #0
 8003da4:	00dd      	lsls	r5, r3, #3
 8003da6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003daa:	00d4      	lsls	r4, r2, #3
 8003dac:	4622      	mov	r2, r4
 8003dae:	462b      	mov	r3, r5
 8003db0:	1814      	adds	r4, r2, r0
 8003db2:	64bc      	str	r4, [r7, #72]	; 0x48
 8003db4:	414b      	adcs	r3, r1
 8003db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	008b      	lsls	r3, r1, #2
 8003dcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dd0:	0082      	lsls	r2, r0, #2
 8003dd2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003dd6:	f7fc f9ff 	bl	80001d8 <__aeabi_uldivmod>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <UART_SetConfig+0x38c>)
 8003de0:	fba3 1302 	umull	r1, r3, r3, r2
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	2164      	movs	r1, #100	; 0x64
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	3332      	adds	r3, #50	; 0x32
 8003df2:	4a2a      	ldr	r2, [pc, #168]	; (8003e9c <UART_SetConfig+0x38c>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfe:	441e      	add	r6, r3
 8003e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e02:	4618      	mov	r0, r3
 8003e04:	f04f 0100 	mov.w	r1, #0
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	1894      	adds	r4, r2, r2
 8003e0e:	603c      	str	r4, [r7, #0]
 8003e10:	415b      	adcs	r3, r3
 8003e12:	607b      	str	r3, [r7, #4]
 8003e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e18:	1812      	adds	r2, r2, r0
 8003e1a:	eb41 0303 	adc.w	r3, r1, r3
 8003e1e:	f04f 0400 	mov.w	r4, #0
 8003e22:	f04f 0500 	mov.w	r5, #0
 8003e26:	00dd      	lsls	r5, r3, #3
 8003e28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e2c:	00d4      	lsls	r4, r2, #3
 8003e2e:	4622      	mov	r2, r4
 8003e30:	462b      	mov	r3, r5
 8003e32:	eb12 0a00 	adds.w	sl, r2, r0
 8003e36:	eb43 0b01 	adc.w	fp, r3, r1
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f04f 0100 	mov.w	r1, #0
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	008b      	lsls	r3, r1, #2
 8003e4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e52:	0082      	lsls	r2, r0, #2
 8003e54:	4650      	mov	r0, sl
 8003e56:	4659      	mov	r1, fp
 8003e58:	f7fc f9be 	bl	80001d8 <__aeabi_uldivmod>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <UART_SetConfig+0x38c>)
 8003e62:	fba3 1302 	umull	r1, r3, r3, r2
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2164      	movs	r1, #100	; 0x64
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	3332      	adds	r3, #50	; 0x32
 8003e74:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <UART_SetConfig+0x38c>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	f003 020f 	and.w	r2, r3, #15
 8003e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4432      	add	r2, r6
 8003e86:	609a      	str	r2, [r3, #8]
}
 8003e88:	bf00      	nop
 8003e8a:	377c      	adds	r7, #124	; 0x7c
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e92:	bf00      	nop
 8003e94:	40011000 	.word	0x40011000
 8003e98:	40011400 	.word	0x40011400
 8003e9c:	51eb851f 	.word	0x51eb851f

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4d0d      	ldr	r5, [pc, #52]	; (8003ed8 <__libc_init_array+0x38>)
 8003ea4:	4c0d      	ldr	r4, [pc, #52]	; (8003edc <__libc_init_array+0x3c>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	2600      	movs	r6, #0
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	4d0b      	ldr	r5, [pc, #44]	; (8003ee0 <__libc_init_array+0x40>)
 8003eb2:	4c0c      	ldr	r4, [pc, #48]	; (8003ee4 <__libc_init_array+0x44>)
 8003eb4:	f000 f87c 	bl	8003fb0 <_init>
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	080061e4 	.word	0x080061e4
 8003edc:	080061e4 	.word	0x080061e4
 8003ee0:	080061e4 	.word	0x080061e4
 8003ee4:	080061e8 	.word	0x080061e8

08003ee8 <__itoa>:
 8003ee8:	1e93      	subs	r3, r2, #2
 8003eea:	2b22      	cmp	r3, #34	; 0x22
 8003eec:	b510      	push	{r4, lr}
 8003eee:	460c      	mov	r4, r1
 8003ef0:	d904      	bls.n	8003efc <__itoa+0x14>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	700b      	strb	r3, [r1, #0]
 8003ef6:	461c      	mov	r4, r3
 8003ef8:	4620      	mov	r0, r4
 8003efa:	bd10      	pop	{r4, pc}
 8003efc:	2a0a      	cmp	r2, #10
 8003efe:	d109      	bne.n	8003f14 <__itoa+0x2c>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	da07      	bge.n	8003f14 <__itoa+0x2c>
 8003f04:	232d      	movs	r3, #45	; 0x2d
 8003f06:	700b      	strb	r3, [r1, #0]
 8003f08:	4240      	negs	r0, r0
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4421      	add	r1, r4
 8003f0e:	f000 f80d 	bl	8003f2c <__utoa>
 8003f12:	e7f1      	b.n	8003ef8 <__itoa+0x10>
 8003f14:	2100      	movs	r1, #0
 8003f16:	e7f9      	b.n	8003f0c <__itoa+0x24>

08003f18 <itoa>:
 8003f18:	f7ff bfe6 	b.w	8003ee8 <__itoa>

08003f1c <memset>:
 8003f1c:	4402      	add	r2, r0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d100      	bne.n	8003f26 <memset+0xa>
 8003f24:	4770      	bx	lr
 8003f26:	f803 1b01 	strb.w	r1, [r3], #1
 8003f2a:	e7f9      	b.n	8003f20 <memset+0x4>

08003f2c <__utoa>:
 8003f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2e:	4c1f      	ldr	r4, [pc, #124]	; (8003fac <__utoa+0x80>)
 8003f30:	b08b      	sub	sp, #44	; 0x2c
 8003f32:	4605      	mov	r5, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	466e      	mov	r6, sp
 8003f38:	f104 0c20 	add.w	ip, r4, #32
 8003f3c:	6820      	ldr	r0, [r4, #0]
 8003f3e:	6861      	ldr	r1, [r4, #4]
 8003f40:	4637      	mov	r7, r6
 8003f42:	c703      	stmia	r7!, {r0, r1}
 8003f44:	3408      	adds	r4, #8
 8003f46:	4564      	cmp	r4, ip
 8003f48:	463e      	mov	r6, r7
 8003f4a:	d1f7      	bne.n	8003f3c <__utoa+0x10>
 8003f4c:	7921      	ldrb	r1, [r4, #4]
 8003f4e:	7139      	strb	r1, [r7, #4]
 8003f50:	1e91      	subs	r1, r2, #2
 8003f52:	6820      	ldr	r0, [r4, #0]
 8003f54:	6038      	str	r0, [r7, #0]
 8003f56:	2922      	cmp	r1, #34	; 0x22
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	d904      	bls.n	8003f68 <__utoa+0x3c>
 8003f5e:	7019      	strb	r1, [r3, #0]
 8003f60:	460b      	mov	r3, r1
 8003f62:	4618      	mov	r0, r3
 8003f64:	b00b      	add	sp, #44	; 0x2c
 8003f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f68:	1e58      	subs	r0, r3, #1
 8003f6a:	4684      	mov	ip, r0
 8003f6c:	fbb5 f7f2 	udiv	r7, r5, r2
 8003f70:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8003f74:	fb02 5617 	mls	r6, r2, r7, r5
 8003f78:	4476      	add	r6, lr
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003f80:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003f84:	462e      	mov	r6, r5
 8003f86:	42b2      	cmp	r2, r6
 8003f88:	f101 0101 	add.w	r1, r1, #1
 8003f8c:	463d      	mov	r5, r7
 8003f8e:	d9ed      	bls.n	8003f6c <__utoa+0x40>
 8003f90:	2200      	movs	r2, #0
 8003f92:	545a      	strb	r2, [r3, r1]
 8003f94:	1919      	adds	r1, r3, r4
 8003f96:	1aa5      	subs	r5, r4, r2
 8003f98:	42aa      	cmp	r2, r5
 8003f9a:	dae2      	bge.n	8003f62 <__utoa+0x36>
 8003f9c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003fa0:	780e      	ldrb	r6, [r1, #0]
 8003fa2:	7006      	strb	r6, [r0, #0]
 8003fa4:	3201      	adds	r2, #1
 8003fa6:	f801 5901 	strb.w	r5, [r1], #-1
 8003faa:	e7f4      	b.n	8003f96 <__utoa+0x6a>
 8003fac:	080061b4 	.word	0x080061b4

08003fb0 <_init>:
 8003fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fb2:	bf00      	nop
 8003fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fb6:	bc08      	pop	{r3}
 8003fb8:	469e      	mov	lr, r3
 8003fba:	4770      	bx	lr

08003fbc <_fini>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	bf00      	nop
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr
